#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
#ifndef FLUENTUI_SWIFT_H
#define FLUENTUI_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FluentUI",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
enum MSFBrandColorsAliasTokens : NSInteger;
@class MSFDynamicColor;
enum MSFForegroundColorsAliasTokens : NSInteger;
enum MSFBackgroundColorsAliasTokens : NSInteger;
enum MSFStrokeColorsAliasTokens : NSInteger;
enum MSFShadowColorsAliasTokens : NSInteger;
enum MSFTypographyAliasTokens : NSInteger;
@class MSFFontInfo;
enum MSFShadowAliasTokens : NSInteger;
@class MSFShadowInfo;
enum MSFElevationAliasTokens : NSInteger;

SWIFT_CLASS_NAMED("AliasTokens")
@interface MSFAliasTokens : NSObject
- (MSFDynamicColor * _Nonnull)brandColorForToken:(enum MSFBrandColorsAliasTokens)token SWIFT_WARN_UNUSED_RESULT;
- (MSFDynamicColor * _Nonnull)foregroundColorForToken:(enum MSFForegroundColorsAliasTokens)token SWIFT_WARN_UNUSED_RESULT;
- (MSFDynamicColor * _Nonnull)backgroundColorForToken:(enum MSFBackgroundColorsAliasTokens)token SWIFT_WARN_UNUSED_RESULT;
- (MSFDynamicColor * _Nonnull)strokeColorForToken:(enum MSFStrokeColorsAliasTokens)token SWIFT_WARN_UNUSED_RESULT;
- (MSFDynamicColor * _Nonnull)shadowColorForToken:(enum MSFShadowColorsAliasTokens)token SWIFT_WARN_UNUSED_RESULT;
- (MSFFontInfo * _Nonnull)typographyForToken:(enum MSFTypographyAliasTokens)token SWIFT_WARN_UNUSED_RESULT;
- (MSFShadowInfo * _Nonnull)shadowForToken:(enum MSFShadowAliasTokens)token SWIFT_WARN_UNUSED_RESULT;
- (MSFShadowInfo * _Nonnull)elevationForToken:(enum MSFElevationAliasTokens)token SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MSFBrandColorsAliasTokens, "BrandColorsTokens", open) {
  MSFBrandColorsAliasTokensPrimary = 0,
  MSFBrandColorsAliasTokensShade10 = 1,
  MSFBrandColorsAliasTokensShade20 = 2,
  MSFBrandColorsAliasTokensShade30 = 3,
  MSFBrandColorsAliasTokensTint10 = 4,
  MSFBrandColorsAliasTokensTint20 = 5,
  MSFBrandColorsAliasTokensTint30 = 6,
  MSFBrandColorsAliasTokensTint40 = 7,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MSFForegroundColorsAliasTokens, "ForegroundColorsTokens", open) {
  MSFForegroundColorsAliasTokensNeutral1 = 0,
  MSFForegroundColorsAliasTokensNeutral2 = 1,
  MSFForegroundColorsAliasTokensNeutral3 = 2,
  MSFForegroundColorsAliasTokensNeutral4 = 3,
  MSFForegroundColorsAliasTokensNeutralDisabled = 4,
  MSFForegroundColorsAliasTokensNeutralInverted = 5,
  MSFForegroundColorsAliasTokensBrandRest = 6,
  MSFForegroundColorsAliasTokensBrandHover = 7,
  MSFForegroundColorsAliasTokensBrandPressed = 8,
  MSFForegroundColorsAliasTokensBrandSelected = 9,
  MSFForegroundColorsAliasTokensBrandDisabled = 10,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MSFBackgroundColorsAliasTokens, "BackgroundColorsTokens", open) {
  MSFBackgroundColorsAliasTokensNeutral1 = 0,
  MSFBackgroundColorsAliasTokensNeutral2 = 1,
  MSFBackgroundColorsAliasTokensNeutral3 = 2,
  MSFBackgroundColorsAliasTokensNeutral4 = 3,
  MSFBackgroundColorsAliasTokensNeutral5 = 4,
  MSFBackgroundColorsAliasTokensNeutralDisabled = 5,
  MSFBackgroundColorsAliasTokensBrandRest = 6,
  MSFBackgroundColorsAliasTokensBrandHover = 7,
  MSFBackgroundColorsAliasTokensBrandPressed = 8,
  MSFBackgroundColorsAliasTokensBrandSelected = 9,
  MSFBackgroundColorsAliasTokensBrandDisabled = 10,
  MSFBackgroundColorsAliasTokensSurfaceQuaternary = 11,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MSFStrokeColorsAliasTokens, "StrokeColorsTokens", open) {
  MSFStrokeColorsAliasTokensNeutral1 = 0,
  MSFStrokeColorsAliasTokensNeutral2 = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MSFShadowColorsAliasTokens, "ShadowColorsTokens", open) {
  MSFShadowColorsAliasTokensNeutralAmbient = 0,
  MSFShadowColorsAliasTokensNeutralKey = 1,
  MSFShadowColorsAliasTokensNeutralAmbientLighter = 2,
  MSFShadowColorsAliasTokensNeutralKeyLighter = 3,
  MSFShadowColorsAliasTokensNeutralAmbientDarker = 4,
  MSFShadowColorsAliasTokensNeutralKeyDarker = 5,
  MSFShadowColorsAliasTokensBrandAmbient = 6,
  MSFShadowColorsAliasTokensBrandKey = 7,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MSFTypographyAliasTokens, "TypographyTokens", open) {
  MSFTypographyAliasTokensDisplay = 0,
  MSFTypographyAliasTokensLargeTitle = 1,
  MSFTypographyAliasTokensTitle1 = 2,
  MSFTypographyAliasTokensTitle2 = 3,
  MSFTypographyAliasTokensTitle3 = 4,
  MSFTypographyAliasTokensBody1Strong = 5,
  MSFTypographyAliasTokensBody1 = 6,
  MSFTypographyAliasTokensBody2Strong = 7,
  MSFTypographyAliasTokensBody2 = 8,
  MSFTypographyAliasTokensCaption1Strong = 9,
  MSFTypographyAliasTokensCaption1 = 10,
  MSFTypographyAliasTokensCaption2 = 11,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MSFShadowAliasTokens, "ShadowTokens", open) {
  MSFShadowAliasTokensClear = 0,
  MSFShadowAliasTokensShadow02 = 1,
  MSFShadowAliasTokensShadow04 = 2,
  MSFShadowAliasTokensShadow08 = 3,
  MSFShadowAliasTokensShadow16 = 4,
  MSFShadowAliasTokensShadow28 = 5,
  MSFShadowAliasTokensShadow64 = 6,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MSFElevationAliasTokens, "ElevationTokens", open) {
  MSFElevationAliasTokensInteractiveElevation1Rest = 0,
  MSFElevationAliasTokensInteractiveElevation1Hover = 1,
  MSFElevationAliasTokensInteractiveElevation1Pressed = 2,
  MSFElevationAliasTokensInteractiveElevation1Selected = 3,
  MSFElevationAliasTokensInteractiveElevation1Disabled = 4,
};

@class UIColor;
@class NSCoder;

SWIFT_CLASS_NAMED("BlurringView")
@interface MSFBlurringView : UIView
- (nonnull instancetype)initWithStyle:(enum UIBlurEffectStyle)style backgroundColor:(UIColor * _Nullable)backgroundColor OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (void)updateBackgroundWithBackgroundColor:(UIColor * _Nullable)backgroundColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@class UIScrollView;
@class NSString;
@class MSFContentHeightResolutionContext;
@class UILayoutGuide;
@protocol MSFBottomSheetControllerDelegate;
@class UIViewPropertyAnimator;
@class UITraitCollection;
@protocol UIViewControllerTransitionCoordinator;
@class NSBundle;

SWIFT_CLASS_NAMED("BottomSheetController")
@interface MSFBottomSheetController : UIViewController
/// Initializes the bottom sheet controller
/// \param headerContentView Top part of the sheet content that is visible in both collapsed and expanded state.
///
/// \param expandedContentView Sheet content below the header which is only visible when the sheet is expanded.
///
/// \param shouldShowDimmingView Indicates if the main content is dimmed when the sheet is expanded.
///
- (nonnull instancetype)initWithHeaderContentView:(UIView * _Nullable)headerContentView expandedContentView:(UIView * _Nonnull)expandedContentView shouldShowDimmingView:(BOOL)shouldShowDimmingView OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Top part of the sheet content that is visible in both collapsed and expanded state.
@property (nonatomic, readonly, strong) UIView * _Nullable headerContentView;
/// Sheet content below the header which is only visible when the sheet is expanded.
@property (nonatomic, readonly, strong) UIView * _Nonnull expandedContentView;
/// A scroll view in <code>expandedContentView</code>’s view hierarchy.
/// Provide this to ensure the bottom sheet pan gesture recognizer coordinates with the scroll view to enable scrolling based on current bottom sheet position and content offset.
@property (nonatomic, strong) UIScrollView * _Nullable hostedScrollView;
/// Indicates if the bottom sheet is expandable.
@property (nonatomic) BOOL isExpandable;
/// Indicates if the bottom sheet view is hidden.
/// Changes to this property are animated. When hiding, new value is reflected after the animation completes.
@property (nonatomic) BOOL isHidden;
/// Indicates if the sheet height is flexible.
/// When set to <code>false</code>, the sheet height is static and always corresponds to the height of the maximum expansion state.
/// Interacting with the sheet will only vertically translate it, moving it partially on/off-screen.
/// When set to <code>true</code>, moving the sheet beyond the <code>.collapsed</code> state will resize it.
/// Use flexible height if you have views attached to the bottom of <code>expandedContentView</code> that should always be visible.
@property (nonatomic) BOOL isFlexibleHeight;
/// Height of <code>headerContentView</code>.
/// Setting this is required when the <code>headerContentView</code> is non-nil.
@property (nonatomic) CGFloat headerContentHeight;
/// Preferred height of <code>expandedContentView</code>.
/// The default value is 0, which results in a full screen sheet expansion.
@property (nonatomic) CGFloat preferredExpandedContentHeight;
/// A string to optionally customize the accessibility label of the bottom sheet handle.
/// The message should convey the “Expand” action and will be used when the bottom sheet is collapsed.
@property (nonatomic, copy) NSString * _Nullable handleExpandCustomAccessibilityLabel;
/// A string to optionally customize the accessibility label of the bottom sheet handle.
/// The message should convey the “Collapse” action and will be used when the bottom sheet is expanded.
@property (nonatomic, copy) NSString * _Nullable handleCollapseCustomAccessibilityLabel;
/// Indicates if the bottom sheet is expanded.
/// Changes to this property are animated. A new value is reflected in the getter only after the animation completes.
@property (nonatomic) BOOL isExpanded;
/// A closure for resolving the desired collapsed sheet height given a resolution context.
@property (nonatomic, copy) CGFloat (^ _Nullable collapsedHeightResolver)(MSFContentHeightResolutionContext * _Nonnull);
/// Height of the top portion of the content view that should be visible when the bottom sheet is collapsed.
/// When set to 0, <code>headerContentHeight</code> will be used.
@property (nonatomic) CGFloat collapsedContentHeight;
/// Indicates if the content should be hidden when the sheet is collapsed
@property (nonatomic) BOOL shouldHideCollapsedContent;
/// Indicates if the sheet should always fill the available width. The default value is true.
@property (nonatomic) BOOL shouldAlwaysFillWidth;
/// When enabled, users will be able to move the sheet to the hidden state by swiping down.
@property (nonatomic) BOOL allowsSwipeToHide;
/// Current height of the portion of a collapsed sheet that’s in the safe area.
@property (nonatomic, readonly) CGFloat collapsedHeightInSafeArea;
/// A layout guide that covers the on-screen portion of the sheet view.
@property (nonatomic, readonly, strong) UILayoutGuide * _Nonnull sheetLayoutGuide;
/// The object that acts as the delegate of the bottom sheet.
@property (nonatomic, weak) id <MSFBottomSheetControllerDelegate> _Nullable delegate;
/// Height of the resizing handle
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat resizingHandleHeight;)
+ (CGFloat)resizingHandleHeight SWIFT_WARN_UNUSED_RESULT;
/// Sets the <code>isExpanded</code> property with a completion handler.
/// \param isExpanded The new value.
///
/// \param animated Indicates if the change should be animated. The default value is <code>true</code>.
///
/// \param completion Closure to be called when the state change completes.
///
- (void)setIsExpanded:(BOOL)isExpanded animated:(BOOL)animated completion:(void (^ _Nullable)(BOOL))completion;
/// Changes the <code>isHidden</code> state with a completion handler.
/// \param isHidden The new value.
///
/// \param animated Indicates if the change should be animated. The default value is <code>true</code>.
///
/// \param completion Closure to be called when the state change completes.
///
- (void)setIsHidden:(BOOL)isHidden animated:(BOOL)animated completion:(void (^ _Nullable)(BOOL))completion;
/// Initiates an interactive <code>isHidden</code> state change driven by the returned <code>UIViewPropertyAnimator</code>.
/// The returned animator comes preloaded with all the animations required to reach the target <code>isHidden</code> state.
/// You can modify the <code>fractionComplete</code> property of the animator to interactively drive the animation in the paused state.
/// You can also change the <code>isReversed</code> property to swap the start and target <code>isHidden</code> states.
/// When you are done driving the animation interactively, you must call <code>startAnimation</code> on the animator to let the animation resume
/// from the current value of <code>fractionComplete</code>.
/// \param isHidden The target state.
///
/// \param completion Closure to be called when the state change completes.
///
///
/// returns:
/// A <code>UIViewPropertyAnimator</code>. The associated animations start in a paused state.
- (UIViewPropertyAnimator * _Nullable)prepareInteractiveIsHiddenChange:(BOOL)isHidden completion:(void (^ _Nullable)(UIViewAnimatingPosition))completion SWIFT_WARN_UNUSED_RESULT;
/// Forces a call to <code>collapsedHeightResolver</code> to fetch the latest desired sheet height.
- (void)invalidateSheetSize;
- (void)loadView;
- (void)viewDidLayoutSubviews;
- (void)viewSafeAreaInsetsDidChange;
- (void)willTransitionToTraitCollection:(UITraitCollection * _Nonnull)newCollection withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UIGestureRecognizer;

@interface MSFBottomSheetController (SWIFT_EXTENSION(FluentUI)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldBeRequiredToFailByGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end

enum BottomSheetExpansionState : NSInteger;
enum BottomSheetInteraction : NSInteger;

SWIFT_PROTOCOL_NAMED("BottomSheetControllerDelegate")
@protocol MSFBottomSheetControllerDelegate
@optional
/// Called after a transition to a new expansion state completes.
/// External changes to<code>isExpanded</code> or <code>isHidden</code> will not trigger this callback.
/// \param bottomSheetController The caller object.
///
/// \param expansionState The expansion state that the sheet moved to.
///
/// \param interaction The user interaction that caused the state change.
///
- (void)bottomSheetController:(MSFBottomSheetController * _Nonnull)bottomSheetController didMoveTo:(enum BottomSheetExpansionState)expansionState interaction:(enum BottomSheetInteraction)interaction;
/// Called when <code>collapsedHeightInSafeArea</code> changes.
- (void)bottomSheetControllerCollapsedHeightInSafeAreaDidChange:(MSFBottomSheetController * _Nonnull)bottomSheetController;
@end

/// Defines the position the sheet is currently in
typedef SWIFT_ENUM(NSInteger, BottomSheetExpansionState, open) {
  BottomSheetExpansionStateExpanded = 0,
  BottomSheetExpansionStateCollapsed = 1,
  BottomSheetExpansionStateHidden = 2,
  BottomSheetExpansionStateTransitioning = 3,
};

/// Interactions that can trigger a state change.
typedef SWIFT_ENUM(NSInteger, BottomSheetInteraction, open) {
  BottomSheetInteractionNoUserAction = 0,
  BottomSheetInteractionSwipe = 1,
  BottomSheetInteractionResizingHandleTap = 2,
  BottomSheetInteractionDimmingViewTap = 3,
};

enum MSFButtonStyle : NSInteger;
@class UIImage;
@class UIFocusUpdateContext;
@class UIFocusAnimationCoordinator;

/// By default, <code>titleLabel</code>‘s <code>adjustsFontForContentSizeCategory</code> is set to true to automatically update its font when device’s content size category changes
IB_DESIGNABLE
SWIFT_CLASS_NAMED("Button")
@interface MSFButton : UIButton
@property (nonatomic) enum MSFButtonStyle style;
/// The button’s image.
/// For ButtonStyle.primaryFilled and ButtonStyle.primaryOutline, the image must be 24x24.
/// For ButtonStyle.secondaryOutline and ButtonStyle.borderless, the image must be 20x20.
/// For other styles, the image is not displayed.
@property (nonatomic, strong) UIImage * _Nullable image;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@property (nonatomic, getter=isEnabled) BOOL enabled;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (void)didUpdateFocusInContext:(UIFocusUpdateContext * _Nonnull)context withAnimationCoordinator:(UIFocusAnimationCoordinator * _Nonnull)coordinator;
- (void)didMoveToWindow;
- (void)layoutSubviews;
- (CGRect)imageRectForContentRect:(CGRect)contentRect SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithStyle:(enum MSFButtonStyle)style OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MSFButtonStyle, "ButtonStyle", open) {
  MSFButtonStylePrimaryFilled = 0,
  MSFButtonStylePrimaryOutline = 1,
  MSFButtonStyleDangerFilled = 2,
  MSFButtonStyleDangerOutline = 3,
  MSFButtonStyleSecondaryOutline = 4,
  MSFButtonStyleTertiaryOutline = 5,
  MSFButtonStyleBorderless = 6,
};


@class UIWindow;

/// Protocol through which consumers can provide colors to “theme” their experiences
/// The window in which the color will be shown is sent to allow apps to provide different experiences per each window
SWIFT_PROTOCOL_NAMED("ColorProviding")
@protocol MSFColorProviding
/// Primary branding color. If this protocol is not conformed to, communicationBlue will be used
- (UIColor * _Nullable)primaryColorFor:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
/// Tint colors. If this protocol is not conformed to, communicationBlueTint* colors will be used
- (UIColor * _Nullable)primaryTint10ColorFor:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)primaryTint20ColorFor:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)primaryTint30ColorFor:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)primaryTint40ColorFor:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
/// Shade colors. If this protocol is not conformed to, communicationBlueShade* colors will be used
- (UIColor * _Nullable)primaryShade10ColorFor:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)primaryShade20ColorFor:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)primaryShade30ColorFor:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
@end


/// A platform-agnostic representation of a 32-bit RGBA color value.
SWIFT_CLASS_NAMED("ColorValue")
@interface MSFColorValue : NSObject
/// Creates a color value instance with the specified three-channel, 8-bit-per-channel color value, usually in hex.
/// For example: <code>0xFF0000</code> represents red, <code>0x00FF00</code> green, and <code>0x0000FF</code> blue.
/// There is no way to specify an alpha channel via this initializer. For that, use <code>init(r:g:b:a)</code> instead.
/// \param hexValue The color value to store, in 24-bit (three-channel, 8-bit) RGB.
///
///
/// returns:
/// A color object that stores the provided color information.
- (nonnull instancetype)init:(uint32_t)hexValue OBJC_DESIGNATED_INITIALIZER;
/// Creates a color value instance with the specified channel values.
/// Parameters work just like <code>UIColor</code>, <code>NSColor</code>, or <code>SwiftUI.Color</code>, and should all be in the range of <code>0.0 ≤ value ≤ 1.0</code>.
/// Any channel that is above 1.0 will be clipped down to 1.0; results are undefined for negative inputs.
/// \param r The red channel.
///
/// \param g The green channel.
///
/// \param b The blue channel.
///
/// \param a The alpha channel.
///
///
/// returns:
/// A color object that stores the provided color information.
- (nonnull instancetype)initWithR:(CGFloat)r g:(CGFloat)g b:(CGFloat)b a:(CGFloat)a OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum MSFColorPalette : NSInteger;

SWIFT_CLASS_NAMED("Colors")
@interface MSFColors : NSObject
/// Associates a <code>ColorProvider</code> with a given <code>UIWindow</code> instance.
/// \param provider The <code>ColorProvider</code> whose colors should be used for controls in this window.
///
/// \param window The window where these colors should be applied.
///
+ (void)setProviderWithProvider:(id <MSFColorProviding> _Nonnull)provider for:(UIWindow * _Nonnull)window;
/// Removes any associated <code>ColorProvider</code> from the given <code>UIWindow</code> instance.
/// \param window The window that should have its <code>ColorProvider</code> removed.
///
+ (void)removeProviderFor:(UIWindow * _Nonnull)window;
/// Use these funcs to grab a color customized by a ColorProviding object for a specific window.. If no colorProvider exists for the window, falls back to deprecated singleton theme color
+ (UIColor * _Nonnull)primaryFor:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)primaryTint10For:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)primaryTint20For:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)primaryTint30For:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)primaryTint40For:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)primaryShade10For:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)primaryShade20For:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)primaryShade30For:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
/// Customization of primary colors should happen through the ColorProviding protocol rather than this singleton. Doing so
/// will allow hosts of fluentui controls to simultaneously host different experiences with different themes
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull primary SWIFT_DEPRECATED_MSG("", "setProvider(_:forWindow:)");)
+ (UIColor * _Nonnull)primary SWIFT_WARN_UNUSED_RESULT;
+ (void)setPrimary:(UIColor * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull primaryTint10 SWIFT_DEPRECATED_MSG("", "setProvider(_:forWindow:)");)
+ (UIColor * _Nonnull)primaryTint10 SWIFT_WARN_UNUSED_RESULT;
+ (void)setPrimaryTint10:(UIColor * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull primaryTint20 SWIFT_DEPRECATED_MSG("", "setProvider(_:forWindow:)");)
+ (UIColor * _Nonnull)primaryTint20 SWIFT_WARN_UNUSED_RESULT;
+ (void)setPrimaryTint20:(UIColor * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull primaryTint30 SWIFT_DEPRECATED_MSG("", "setProvider(_:forWindow:)");)
+ (UIColor * _Nonnull)primaryTint30 SWIFT_WARN_UNUSED_RESULT;
+ (void)setPrimaryTint30:(UIColor * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull primaryTint40 SWIFT_DEPRECATED_MSG("", "setProvider(_:forWindow:)");)
+ (UIColor * _Nonnull)primaryTint40 SWIFT_WARN_UNUSED_RESULT;
+ (void)setPrimaryTint40:(UIColor * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull primaryShade10 SWIFT_DEPRECATED_MSG("", "setProvider(_:forWindow:)");)
+ (UIColor * _Nonnull)primaryShade10 SWIFT_WARN_UNUSED_RESULT;
+ (void)setPrimaryShade10:(UIColor * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull primaryShade20 SWIFT_DEPRECATED_MSG("", "setProvider(_:forWindow:)");)
+ (UIColor * _Nonnull)primaryShade20 SWIFT_WARN_UNUSED_RESULT;
+ (void)setPrimaryShade20:(UIColor * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull primaryShade30 SWIFT_DEPRECATED_MSG("", "setProvider(_:forWindow:)");)
+ (UIColor * _Nonnull)primaryShade30 SWIFT_WARN_UNUSED_RESULT;
+ (void)setPrimaryShade30:(UIColor * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull foregroundOnPrimary SWIFT_DEPRECATED_MSG("", "textOnAccent");)
+ (UIColor * _Nonnull)foregroundOnPrimary SWIFT_WARN_UNUSED_RESULT;
+ (void)setForegroundOnPrimary:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray950;)
+ (UIColor * _Nonnull)gray950 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray900;)
+ (UIColor * _Nonnull)gray900 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray800;)
+ (UIColor * _Nonnull)gray800 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray700;)
+ (UIColor * _Nonnull)gray700 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray600;)
+ (UIColor * _Nonnull)gray600 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray500;)
+ (UIColor * _Nonnull)gray500 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray400;)
+ (UIColor * _Nonnull)gray400 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray300;)
+ (UIColor * _Nonnull)gray300 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray200;)
+ (UIColor * _Nonnull)gray200 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray100;)
+ (UIColor * _Nonnull)gray100 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray50;)
+ (UIColor * _Nonnull)gray50 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray25;)
+ (UIColor * _Nonnull)gray25 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull error;)
+ (UIColor * _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull warning;)
+ (UIColor * _Nonnull)warning SWIFT_WARN_UNUSED_RESULT;
/// Used for hyperlinks
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull communicationBlue;)
+ (UIColor * _Nonnull)communicationBlue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull disabled SWIFT_DEPRECATED_MSG("", "textDisabled");)
+ (UIColor * _Nonnull)disabled SWIFT_WARN_UNUSED_RESULT;
/// text color used for main level in the screen. eg. title in dialog, title in navigationbar with <code>surfacePrimary</code>, etc
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull textDominant;)
+ (UIColor * _Nonnull)textDominant SWIFT_WARN_UNUSED_RESULT;
/// text color used for titles
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull textPrimary;)
+ (UIColor * _Nonnull)textPrimary SWIFT_WARN_UNUSED_RESULT;
+ (void)setTextPrimary:(UIColor * _Nonnull)value;
/// text color used for subtitles
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull textSecondary;)
+ (UIColor * _Nonnull)textSecondary SWIFT_WARN_UNUSED_RESULT;
/// text color used in disabled state
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull textDisabled;)
+ (UIColor * _Nonnull)textDisabled SWIFT_WARN_UNUSED_RESULT;
/// text appears on top of the surface that uses <code>Colors.primary</code> as background color
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull textOnAccent;)
+ (UIColor * _Nonnull)textOnAccent SWIFT_WARN_UNUSED_RESULT;
/// icon used as call-to-actions without a label attached. They need to reach a minimum contrast ratio 4.5:1 to its background
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull iconPrimary;)
+ (UIColor * _Nonnull)iconPrimary SWIFT_WARN_UNUSED_RESULT;
/// icon that are attached to a label and are only used for decorative purposes
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull iconSecondary;)
+ (UIColor * _Nonnull)iconSecondary SWIFT_WARN_UNUSED_RESULT;
/// icon color used in disabled state
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull iconDisabled;)
+ (UIColor * _Nonnull)iconDisabled SWIFT_WARN_UNUSED_RESULT;
/// icon appears on top of surfaces that uses <code>Colors.primary</code> as background color
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull iconOnAccent;)
+ (UIColor * _Nonnull)iconOnAccent SWIFT_WARN_UNUSED_RESULT;
/// In Darkmode, our system use two sets of background colors – called base and elevated – to enhance the perception of depath when one dark interface is layered above another.
/// The dark base colors are darker, making background interface appear to recede, and the elevate colors are lighter, making foreground interfaces appear to advance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull surfacePrimary;)
+ (UIColor * _Nonnull)surfacePrimary SWIFT_WARN_UNUSED_RESULT;
+ (void)setSurfacePrimary:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull surfaceSecondary;)
+ (UIColor * _Nonnull)surfaceSecondary SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull surfaceTertiary;)
+ (UIColor * _Nonnull)surfaceTertiary SWIFT_WARN_UNUSED_RESULT;
/// also used for disabled background color
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull surfaceQuaternary;)
+ (UIColor * _Nonnull)surfaceQuaternary SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull dividerOnPrimary;)
+ (UIColor * _Nonnull)dividerOnPrimary SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull dividerOnSecondary;)
+ (UIColor * _Nonnull)dividerOnSecondary SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull dividerOnTertiary;)
+ (UIColor * _Nonnull)dividerOnTertiary SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)colorFromPalette:(enum MSFColorPalette)palette SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// colors defined in asset catalog
typedef SWIFT_ENUM_NAMED(NSInteger, MSFColorPalette, "Palette", open) {
  MSFColorPaletteAnchorShade30 = 0,
  MSFColorPaletteAnchorTint40 = 1,
  MSFColorPaletteBeigeShade30 = 2,
  MSFColorPaletteBeigeTint40 = 3,
  MSFColorPaletteBlueShade30 = 4,
  MSFColorPaletteBlueTint40 = 5,
  MSFColorPaletteBrassShade30 = 6,
  MSFColorPaletteBrassTint40 = 7,
  MSFColorPaletteBrownShade30 = 8,
  MSFColorPaletteBrownTint40 = 9,
  MSFColorPaletteCornFlowerShade30 = 10,
  MSFColorPaletteCornFlowerTint40 = 11,
  MSFColorPaletteCranberryShade30 = 12,
  MSFColorPaletteCranberryTint40 = 13,
  MSFColorPaletteDarkGreenShade30 = 14,
  MSFColorPaletteDarkGreenTint40 = 15,
  MSFColorPaletteDarkRedShade30 = 16,
  MSFColorPaletteDarkRedTint40 = 17,
  MSFColorPaletteForestShade30 = 18,
  MSFColorPaletteForestTint40 = 19,
  MSFColorPaletteGoldShade30 = 20,
  MSFColorPaletteGoldTint40 = 21,
  MSFColorPaletteGrapeShade30 = 22,
  MSFColorPaletteGrapeTint40 = 23,
  MSFColorPaletteLavenderShade30 = 24,
  MSFColorPaletteLavenderTint40 = 25,
  MSFColorPaletteLightTealShade30 = 26,
  MSFColorPaletteLightTealTint40 = 27,
  MSFColorPaletteLilacShade30 = 28,
  MSFColorPaletteLilacTint40 = 29,
  MSFColorPaletteMagentaShade30 = 30,
  MSFColorPaletteMagentaTint40 = 31,
  MSFColorPaletteMarigoldShade30 = 32,
  MSFColorPaletteMarigoldTint40 = 33,
  MSFColorPaletteMinkShade30 = 34,
  MSFColorPaletteMinkTint40 = 35,
  MSFColorPaletteNavyShade30 = 36,
  MSFColorPaletteNavyTint40 = 37,
  MSFColorPalettePeachShade30 = 38,
  MSFColorPalettePeachTint40 = 39,
  MSFColorPalettePinkShade30 = 40,
  MSFColorPalettePinkTint40 = 41,
  MSFColorPalettePlatinumShade30 = 42,
  MSFColorPalettePlatinumTint40 = 43,
  MSFColorPalettePlumShade30 = 44,
  MSFColorPalettePlumTint40 = 45,
  MSFColorPalettePumpkinShade30 = 46,
  MSFColorPalettePumpkinTint40 = 47,
  MSFColorPalettePurpleShade30 = 48,
  MSFColorPalettePurpleTint40 = 49,
  MSFColorPaletteRedShade30 = 50,
  MSFColorPaletteRedTint40 = 51,
  MSFColorPaletteRoyalBlueShade30 = 52,
  MSFColorPaletteRoyalBlueTint40 = 53,
  MSFColorPaletteSeafoamShade30 = 54,
  MSFColorPaletteSeafoamTint40 = 55,
  MSFColorPaletteSteelShade30 = 56,
  MSFColorPaletteSteelTint40 = 57,
  MSFColorPaletteTealShade30 = 58,
  MSFColorPaletteTealTint40 = 59,
  MSFColorPalettePinkRed10 = 60,
  MSFColorPaletteRed20 = 61,
  MSFColorPaletteRed10 = 62,
  MSFColorPaletteOrange30 = 63,
  MSFColorPaletteOrange20 = 64,
  MSFColorPaletteOrangeYellow20 = 65,
  MSFColorPaletteGreen20 = 66,
  MSFColorPaletteGreen10 = 67,
  MSFColorPaletteCyan30 = 68,
  MSFColorPaletteCyan20 = 69,
  MSFColorPaletteCyanBlue20 = 70,
  MSFColorPaletteCyanBlue10 = 71,
  MSFColorPaletteBlue10 = 72,
  MSFColorPaletteBlueMagenta30 = 73,
  MSFColorPaletteBlueMagenta20 = 74,
  MSFColorPaletteMagenta20 = 75,
  MSFColorPaletteMagenta10 = 76,
  MSFColorPaletteMagentaPink10 = 77,
  MSFColorPaletteGray40 = 78,
  MSFColorPaletteGray30 = 79,
  MSFColorPaletteGray20 = 80,
  MSFColorPaletteGray25 = 81,
  MSFColorPaletteGray50 = 82,
  MSFColorPaletteGray100 = 83,
  MSFColorPaletteGray200 = 84,
  MSFColorPaletteGray300 = 85,
  MSFColorPaletteGray400 = 86,
  MSFColorPaletteGray500 = 87,
  MSFColorPaletteGray600 = 88,
  MSFColorPaletteGray700 = 89,
  MSFColorPaletteGray800 = 90,
  MSFColorPaletteGray900 = 91,
  MSFColorPaletteGray950 = 92,
  MSFColorPaletteCommunicationBlue = 93,
  MSFColorPaletteCommunicationBlueTint40 = 94,
  MSFColorPaletteCommunicationBlueTint30 = 95,
  MSFColorPaletteCommunicationBlueTint20 = 96,
  MSFColorPaletteCommunicationBlueTint10 = 97,
  MSFColorPaletteCommunicationBlueShade30 = 98,
  MSFColorPaletteCommunicationBlueShade20 = 99,
  MSFColorPaletteCommunicationBlueShade10 = 100,
  MSFColorPaletteDangerPrimary = 101,
  MSFColorPaletteDangerTint40 = 102,
  MSFColorPaletteDangerTint30 = 103,
  MSFColorPaletteDangerTint20 = 104,
  MSFColorPaletteDangerTint10 = 105,
  MSFColorPaletteDangerShade30 = 106,
  MSFColorPaletteDangerShade20 = 107,
  MSFColorPaletteDangerShade10 = 108,
  MSFColorPaletteWarningPrimary = 109,
  MSFColorPaletteWarningTint40 = 110,
  MSFColorPaletteWarningTint30 = 111,
  MSFColorPaletteWarningTint20 = 112,
  MSFColorPaletteWarningTint10 = 113,
  MSFColorPaletteWarningShade30 = 114,
  MSFColorPaletteWarningShade20 = 115,
  MSFColorPaletteWarningShade10 = 116,
  MSFColorPaletteSuccessPrimary = 117,
  MSFColorPaletteSuccessTint40 = 118,
  MSFColorPaletteSuccessTint30 = 119,
  MSFColorPaletteSuccessTint20 = 120,
  MSFColorPaletteSuccessTint10 = 121,
  MSFColorPaletteSuccessShade30 = 122,
  MSFColorPaletteSuccessShade20 = 123,
  MSFColorPaletteSuccessShade10 = 124,
  MSFColorPalettePresenceAvailable = 125,
  MSFColorPalettePresenceAway = 126,
  MSFColorPalettePresenceBlocked = 127,
  MSFColorPalettePresenceBusy = 128,
  MSFColorPalettePresenceDnd = 129,
  MSFColorPalettePresenceOffline = 130,
  MSFColorPalettePresenceOof = 131,
  MSFColorPalettePresenceUnknown = 132,
};




@interface MSFColors (SWIFT_EXTENSION(FluentUI))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull separatorDefault;)
+ (UIColor * _Nonnull)separatorDefault SWIFT_WARN_UNUSED_RESULT;
@end


@interface MSFColors (SWIFT_EXTENSION(FluentUI))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull drawerBackground;)
+ (UIColor * _Nonnull)drawerBackground SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull popoverBackground;)
+ (UIColor * _Nonnull)popoverBackground SWIFT_WARN_UNUSED_RESULT;
@end


@interface MSFColors (SWIFT_EXTENSION(FluentUI))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull navigationBarBackground;)
+ (UIColor * _Nonnull)navigationBarBackground SWIFT_WARN_UNUSED_RESULT;
@end


@interface MSFColors (SWIFT_EXTENSION(FluentUI))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull tableBackground;)
+ (UIColor * _Nonnull)tableBackground SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull tableBackgroundGrouped;)
+ (UIColor * _Nonnull)tableBackgroundGrouped SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull tableCellBackground;)
+ (UIColor * _Nonnull)tableCellBackground SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull tableCellBackgroundGrouped;)
+ (UIColor * _Nonnull)tableCellBackgroundGrouped SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull tableCellBackgroundSelected;)
+ (UIColor * _Nonnull)tableCellBackgroundSelected SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull tableCellImage;)
+ (UIColor * _Nonnull)tableCellImage SWIFT_WARN_UNUSED_RESULT;
@end


/// Contains all information necessary to determine desired height of content inside of a container.
SWIFT_CLASS_NAMED("ContentHeightResolutionContext")
@interface MSFContentHeightResolutionContext : NSObject
/// Maximum height of the content.
@property (nonatomic, readonly) CGFloat maximumHeight;
/// Trait collection of the content container.
@property (nonatomic, readonly, strong) UITraitCollection * _Nonnull containerTraitCollection;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Common wrapper for hosting and exposing SwiftUI components to UIKit-based clients.
SWIFT_CLASS("_TtC8FluentUI18ControlHostingView")
@interface ControlHostingView : UIView
/// The intrinsic content size of the wrapped SwiftUI view.
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// Asks the view to calculate and return the size that best fits the specified size.
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

enum MSFDimmingViewType : NSInteger;

SWIFT_CLASS_NAMED("DimmingView")
@interface MSFDimmingView : UIView
- (nonnull instancetype)initWithType:(enum MSFDimmingViewType)type OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


typedef SWIFT_ENUM_NAMED(NSInteger, MSFDimmingViewType, "DimmingViewType", open) {
  MSFDimmingViewTypeWhite = 1,
  MSFDimmingViewTypeBlack = 2,
  MSFDimmingViewTypeNone = 3,
};

enum MSFDrawerPresentationStyle : NSInteger;
enum MSFDrawerPresentationBackground : NSInteger;
@class UIPanGestureRecognizer;
enum MSFDrawerResizingBehavior : NSInteger;
@protocol MSFDrawerControllerDelegate;
enum MSFDrawerPresentationDirection : NSInteger;
@class UIBarButtonItem;
@protocol UIContentContainer;

/// <code>DrawerController</code> is used to present a portion of UI in a slider frame that shows from a side on iPhone/iPad and in a popover on iPad.
/// Use <code>presentationDirection</code> to pick the direction of presentation and <code>presentationOrigin</code> to specify the offset (in screen coordinates) from which to show drawer. If not provided it will be calculated automatically: bottom of navigation bar for <code>.down</code> presentation and edge of the screen for other presentations.
/// <code>DrawerController</code> will be presented as a popover on iPad (for vertical presentation) and so requires either <code>sourceView</code>/<code>sourceRect</code> or <code>barButtonItem</code> to be provided via available initializers. Use <code>permittedArrowDirections</code> to specify the direction of the popover arrow.
/// Set either <code>contentController</code> or <code>contentView</code> to provide content for the drawer. Desired content size can be specified by using either drawer’s or content controller’s <code>preferredContentSize</code>. If the size is not specified by these means, it will be auto-calculated from the fitting size of the content view.
/// Use <code>resizingBehavior</code> to allow a user to resize or dismiss the drawer by tapping and dragging any area that does not handle this gesture itself.
SWIFT_CLASS_NAMED("DrawerController")
@interface MSFDrawerController : UIViewController
/// Set <code>backgroundColor</code> to customize background color of the drawer
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// Set <code>contentController</code> to provide a controller that will represent drawer’s content. Its view will be hosted in the root view of the drawer and will be sized and positioned to accommodate any shell UI of the drawer.
/// Content controller can provide <code>preferredContentSize</code> which will be used as a content size to calculate the size of the drawer on screen.
@property (nonatomic, strong) UIViewController * _Nullable contentController;
/// Set <code>contentView</code> to provide a view that will represent drawer’s content. It will be hosted in the root view of the drawer and will be sized and positioned to accommodate any shell UI of the drawer.
/// If you want to specify the size of the content inside the drawer then you can do this through drawer’s <code>preferredContentSize</code> which will be used to calculate the size of the drawer on screen. Otherwise the fitting size of the content view will be used.
@property (nonatomic, strong) UIView * _Nullable contentView;
/// Set <code>contentScrollView</code> to allow drawer to resize as the result of scrolling in this view (scrolling will be blocked until drawer cannot resize anymore).
@property (nonatomic, strong) UIScrollView * _Nullable contentScrollView;
/// When <code>presentationStyle</code> is <code>.automatic</code> (the default value) drawer is presented as a slideover in horizontally compact environments and as a popover otherwise. For horizontal presentation a slideover is always used. Set this property to a specific presentation style to enforce it in all environments.
@property (nonatomic) enum MSFDrawerPresentationStyle presentationStyle;
/// Use <code>presentationOffset</code> to offset drawer from the presentation base in the direction of presentation. Only supported in horizontally regular environments for vertical presentation.
@property (nonatomic) CGFloat presentationOffset;
@property (nonatomic) enum MSFDrawerPresentationBackground presentationBackground;
/// Use <code>passThroughView</code> to make underlying view interactable. This view can be set from presenting view controller to recieve all the touch events from drawer’s presentation background.
@property (nonatomic, weak) UIView * _Nullable passThroughView SWIFT_DEPRECATED_MSG("Use BottomSheetController for better accessibility support");
/// Set <code>presentingGesture</code> before calling <code>present</code> to provide a gesture recognizer that resulted in the presentation of the drawer and to allow this presentation to be interactive.
/// Only supported for a horizontal presentation direction.
@property (nonatomic, strong) UIPanGestureRecognizer * _Nullable presentingGesture;
/// When <code>resizingBehavior</code> is not <code>.none</code> a user can resize the drawer by tapping and dragging any area that does not handle this gesture itself. For example, if <code>contentController</code> constains a <code>UINavigationController</code>, a user can tap and drag navigation bar to resize the drawer.
/// By resizing a drawer a user can switch between several predefined states:
/// <ul>
///   <li>
///     a drawer can be expanded (see <code>isExpanded</code> property, only for vertical presentation);
///   </li>
///   <li>
///     returned to normal state from expanded state;
///   </li>
///   <li>
///     or dismissed.
///   </li>
/// </ul>
/// When <code>resizingBehavior</code> is <code>.dismiss</code> the expanding behavior is not available - drawer can only be dismissed.
/// The corresponding <code>delegate</code> methods will be called for these state changes: see <code>drawerControllerDidChangeExpandedState</code> and <code>drawerControllerWillDismiss</code>/<code>drawerControllerDidDismiss</code>.
/// Resizing is supported only when drawer is presented as a slideover. <code>.dismissOrExpand</code> is not supported for horizontal presentation.
@property (nonatomic) enum MSFDrawerResizingBehavior resizingBehavior;
/// Set <code>resizingHandleViewBackgroundColor</code> to customize background color of resizingHandleView if it is shown
@property (nonatomic, strong) UIColor * _Nonnull resizingHandleViewBackgroundColor;
/// Set <code>isExpanded</code> to <code>true</code> to maximize the drawer’s height to fill the device screen vertically minus the safe areas. Set to <code>false</code> to restore it to the normal size.
/// Not supported for horizontal presentation. Transition is always animated when drawer is visible.
@property (nonatomic) BOOL isExpanded;
/// Set <code>adjustsHeightForKeyboard</code> to <code>true</code> to allow drawer to adjust its height when keyboard is shown or hidden, so that drawer’s content is always visible.
/// Supported only when drawer is presented as a slideover with the <code>.up</code> presentation direction.
@property (nonatomic) BOOL adjustsHeightForKeyboard;
/// Use <code>permittedArrowDirections</code> to specify the direction of the popover arrow for popover presentation on iPad.
@property (nonatomic) UIPopoverArrowDirection permittedArrowDirections;
@property (nonatomic) CGSize preferredContentSize;
/// For <code>vertical</code> presentation shown when horizontal size is <code>.compact</code>, the content width will be the full width of the presenting window. If set to false, the <code>preferredContentSize.width</code> will be used for calculation in landscape mode.
@property (nonatomic) BOOL shouldUseWindowFullWidthInLandscape;
/// Limits the full window width to its safe area for <code>vertical</code> presentation.
@property (nonatomic) BOOL shouldRespectSafeAreaForWindowFullWidth;
@property (nonatomic, readonly) BOOL shouldAutorotate;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
/// <code>onDismiss</code> is called when drawer is being dismissed.
@property (nonatomic, copy) void (^ _Nullable onDismiss)(void);
/// <code>onDismissCompleted</code> is called after drawer has been dismissed.
@property (nonatomic, copy) void (^ _Nullable onDismissCompleted)(void);
@property (nonatomic, weak) id <MSFDrawerControllerDelegate> _Nullable delegate;
/// Initializes <code>DrawerController</code> to be presented as a popover from <code>sourceRect</code> in <code>sourceView</code> on iPad and as a slideover on iPhone/iPad.
/// \param sourceView The view containing the anchor rectangle for the popover.
///
/// \param sourceRect The rectangle in the specified view in which to anchor the popover.
///
/// \param presentationOrigin The offset (in screen coordinates) from which to show a slideover. If not provided it will be calculated automatically: bottom of navigation bar for <code>.down</code> presentation and edge of the screen for other presentations.
///
/// \param presentationDirection The direction of slideover presentation.
///
/// \param preferredMaximumHeight The maximum height to which the drawer is preferred to expand
///
- (nonnull instancetype)initWithSourceView:(UIView * _Nonnull)sourceView sourceRect:(CGRect)sourceRect presentationOrigin:(CGFloat)presentationOrigin presentationDirection:(enum MSFDrawerPresentationDirection)presentationDirection preferredMaximumHeight:(CGFloat)preferredMaximumHeight OBJC_DESIGNATED_INITIALIZER;
/// Initializes <code>DrawerController</code> to be presented as a popover from <code>barButtonItem</code> on iPad and as a slideover on iPhone/iPad.
/// \param barButtonItem The bar button item on which to anchor the popover.
///
/// \param presentationOrigin The offset (in screen coordinates) from which to show a slideover. If not provided it will be calculated automatically: bottom of navigation bar for <code>.down</code> presentation and edge of the screen for other presentations.
///
/// \param presentationDirection The direction of slideover presentation.
///
- (nonnull instancetype)initWithBarButtonItem:(UIBarButtonItem * _Nonnull)barButtonItem presentationOrigin:(CGFloat)presentationOrigin presentationDirection:(enum MSFDrawerPresentationDirection)presentationDirection preferredMaximumHeight:(CGFloat)preferredMaximumHeight OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)willTransitionToTraitCollection:(UITraitCollection * _Nonnull)newCollection withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)preferredContentSizeDidChangeForChildContentContainer:(id <UIContentContainer> _Nonnull)container;
- (BOOL)accessibilityPerformEscape SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@interface MSFDrawerController (SWIFT_EXTENSION(FluentUI)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end

@class UIPresentationController;

@interface MSFDrawerController (SWIFT_EXTENSION(FluentUI)) <UIPopoverPresentationControllerDelegate>
- (UIModalPresentationStyle)adaptivePresentationStyleForPresentationController:(UIPresentationController * _Nonnull)controller traitCollection:(UITraitCollection * _Nonnull)traitCollection SWIFT_WARN_UNUSED_RESULT;
- (BOOL)presentationControllerShouldDismiss:(UIPresentationController * _Nonnull)presentationController SWIFT_WARN_UNUSED_RESULT;
@end

@protocol UIViewControllerAnimatedTransitioning;
@protocol UIViewControllerInteractiveTransitioning;

@interface MSFDrawerController (SWIFT_EXTENSION(FluentUI)) <UIViewControllerTransitioningDelegate>
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForPresentedController:(UIViewController * _Nonnull)presented presentingController:(UIViewController * _Nonnull)presenting sourceController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForDismissedController:(UIViewController * _Nonnull)dismissed SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerInteractiveTransitioning> _Nullable)interactionControllerForPresentation:(id <UIViewControllerAnimatedTransitioning> _Nonnull)animator SWIFT_WARN_UNUSED_RESULT;
- (UIPresentationController * _Nullable)presentationControllerForPresentedViewController:(UIViewController * _Nonnull)presented presentingViewController:(UIViewController * _Nullable)presenting sourceViewController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL_NAMED("DrawerControllerDelegate")
@protocol MSFDrawerControllerDelegate
@optional
/// Called when a user resizes the drawer enough to change its expanded state. Use <code>isExpanded</code> property to get the current state.
/// Use this method to turn on/off specific UI features of your drawer’s content that depend on expanded state. Method is called after expanded state has been changed but before animation is completed.
- (void)drawerControllerDidChangeExpandedState:(MSFDrawerController * _Nonnull)controller;
/// Called when drawer is being dismissed.
- (void)drawerControllerWillDismiss:(MSFDrawerController * _Nonnull)controller;
/// Called after drawer has been dismissed.
- (void)drawerControllerDidDismiss:(MSFDrawerController * _Nonnull)controller;
/// Called when drawer is getting dismissed when user tries to dismiss drawer by tapping in background, using resizing handle or dragging drawer to bottom. Use this method to prevent the drawer from being dismissed in these scenarios.
- (BOOL)drawerControllerShouldDismissDrawer:(MSFDrawerController * _Nonnull)controller SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MSFDrawerPresentationBackground, "DrawerPresentationBackground", open) {
/// Clear background
  MSFDrawerPresentationBackgroundNone = 0,
/// Black semi-transparent background
  MSFDrawerPresentationBackgroundBlack = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MSFDrawerPresentationDirection, "DrawerPresentationDirection", open) {
/// Drawer animated down from a top base
  MSFDrawerPresentationDirectionDown = 0,
/// Drawer animated up from a bottom base
  MSFDrawerPresentationDirectionUp = 1,
/// Drawer animated right from a left base (flipped for RTL)
  MSFDrawerPresentationDirectionFromLeading = 2,
/// Drawer animated left from a right base (flipped for RTL)
  MSFDrawerPresentationDirectionFromTrailing = 3,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MSFDrawerPresentationStyle, "DrawerPresentationStyle", open) {
/// Always <code>.slideover</code> for horizontal presentation. For vertical presentation results in <code>.slideover</code> in horizontally compact environments, <code>.popover</code> otherwise.
  MSFDrawerPresentationStyleAutomatic = -1,
  MSFDrawerPresentationStyleSlideover = 0,
  MSFDrawerPresentationStylePopover = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MSFDrawerResizingBehavior, "DrawerResizingBehavior", open) {
  MSFDrawerResizingBehaviorNone = 0,
  MSFDrawerResizingBehaviorDismiss = 1,
  MSFDrawerResizingBehaviorExpand = 2,
  MSFDrawerResizingBehaviorDismissOrExpand = 3,
};


/// Represents a set of color values to be used in different contexts.
SWIFT_CLASS_NAMED("DynamicColor")
@interface MSFDynamicColor : NSObject
/// Creates a dynamic color object that wraps a set of color values for various rendering contexts.
/// \param light The default color for a light context. Required.
///
/// \param lightHighContrast The override color for a light, high contrast context. Optional.
///
/// \param lightElevated The override color for a light, elevated context. Optional.
///
/// \param lightElevatedHighContrast The override color for a light, elevated, high contrast context. Optional.
///
/// \param dark The override color for a dark context. Optional.
///
/// \param darkHighContrast The override color for a dark, high contrast context. Optional.
///
/// \param darkElevated The override color for a dark, elevated context. Optional.
///
/// \param darkElevatedHighContrast The override color for a dark, elevated, high contrast context. Optional.
///
- (nonnull instancetype)initWithLight:(MSFColorValue * _Nonnull)light lightHighContrast:(MSFColorValue * _Nullable)lightHighContrast lightElevated:(MSFColorValue * _Nullable)lightElevated lightElevatedHighContrast:(MSFColorValue * _Nullable)lightElevatedHighContrast dark:(MSFColorValue * _Nullable)dark darkHighContrast:(MSFColorValue * _Nullable)darkHighContrast darkElevated:(MSFColorValue * _Nullable)darkElevated darkElevatedHighContrast:(MSFColorValue * _Nullable)darkElevatedHighContrast OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Defines the timing for the call of the onSelected closure/block
typedef SWIFT_ENUM_NAMED(NSInteger, MSFPopupMenuItemExecutionMode, "ExecutionMode", open) {
/// <code>onSelected</code> is called right after item is tapped, before popup menu dismissal
  MSFPopupMenuItemExecutionModeOnSelection = 0,
/// <code>onSelected</code> is called right after item is tapped, but prevent popup menu dismissal
  MSFPopupMenuItemExecutionModeOnSelectionWithoutDismissal = 1,
/// <code>onSelected</code> is called after popup menu is dismissed, but before its <code>onDismissCompleted</code> is called
  MSFPopupMenuItemExecutionModeAfterPopupMenuDismissal = 2,
/// <code>onSelected</code> is called after popup menu is dismissed and its <code>onDismissCompleted</code> is called
  MSFPopupMenuItemExecutionModeAfterPopupMenuDismissalCompleted = 3,
};


/// Base class that allows for customization of global, alias, and control tokens.
SWIFT_CLASS_NAMED("FluentTheme")
@interface MSFFluentTheme : NSObject
/// Initializes and returns a new <code>FluentTheme</code>.
/// Once created, a <code>FluentTheme</code> can have its <code>AliasTokens</code> customized by setting custom values on the
/// <code>aliasTokens</code> property. Control tokens can be customized via <code>register(controlType:tokens:) </code>.
/// See the descriptions of those two for additional information.
///
/// returns:
/// An initialized <code>FluentTheme</code> instance.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// The associated <code>AliasTokens</code> for this theme.
@property (nonatomic, readonly, strong) MSFAliasTokens * _Nonnull aliasTokens;
@end

@protocol UIAppearanceContainer;

SWIFT_CLASS("_TtC8FluentUI17FluentUIFramework")
@interface FluentUIFramework : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nonnull resourceBundle;)
+ (NSBundle * _Nonnull)resourceBundle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nonnull colorsBundle;)
+ (NSBundle * _Nonnull)colorsBundle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL usesFluentIcons SWIFT_DEPRECATED_MSG("Non-fluent icons no longer supported. Setting this var no longer has any effect and it will be removed in a future update.");)
+ (BOOL)usesFluentIcons SWIFT_WARN_UNUSED_RESULT;
+ (void)setUsesFluentIcons:(BOOL)value;
+ (void)initializeAppearance SWIFT_DEPRECATED_MSG("", "initializeAppearanceWith:whenContainedInInstancesOf:");
+ (void)initializeAppearanceWith:(UIColor * _Nonnull)primaryColor whenContainedInInstancesOf:(NSArray<Class <UIAppearanceContainer>> * _Nullable)containerTypes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Represents the description of a font used by FluentUI components.
SWIFT_CLASS_NAMED("FontInfo")
@interface MSFFontInfo : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIFont;

SWIFT_CLASS_NAMED("Fonts")
@interface MSFFonts : NSObject
/// Bold 34pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull largeTitle;)
+ (UIFont * _Nonnull)largeTitle SWIFT_WARN_UNUSED_RESULT;
/// Bold 28 pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull title1;)
+ (UIFont * _Nonnull)title1 SWIFT_WARN_UNUSED_RESULT;
/// Semibold 22pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull title2;)
+ (UIFont * _Nonnull)title2 SWIFT_WARN_UNUSED_RESULT;
/// Semibold 17pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull headline;)
+ (UIFont * _Nonnull)headline SWIFT_WARN_UNUSED_RESULT;
/// Regular 17pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull body;)
+ (UIFont * _Nonnull)body SWIFT_WARN_UNUSED_RESULT;
/// Regular 15pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull subhead;)
+ (UIFont * _Nonnull)subhead SWIFT_WARN_UNUSED_RESULT;
/// Regular 13pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull footnote;)
+ (UIFont * _Nonnull)footnote SWIFT_WARN_UNUSED_RESULT;
/// Medium 15pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull button1;)
+ (UIFont * _Nonnull)button1 SWIFT_WARN_UNUSED_RESULT;
/// Medium 13pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull button2;)
+ (UIFont * _Nonnull)button2 SWIFT_WARN_UNUSED_RESULT;
/// Regular 12pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull caption1;)
+ (UIFont * _Nonnull)caption1 SWIFT_WARN_UNUSED_RESULT;
/// Regular 11pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull caption2;)
+ (UIFont * _Nonnull)caption2 SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum MSFNeutralColorsToken : NSInteger;
enum MSFSharedColorSets : NSInteger;
enum MSFSharedColorsTokens : NSInteger;

/// Global Tokens represent a unified set of constants to be used by Fluent UI.
SWIFT_CLASS_NAMED("GlobalTokens")
@interface MSFGlobalTokens : NSObject
+ (MSFColorValue * _Nonnull)neutralColorForToken:(enum MSFNeutralColorsToken)token SWIFT_WARN_UNUSED_RESULT;
+ (MSFColorValue * _Nonnull)sharedColorForColorSet:(enum MSFSharedColorSets)sharedColor token:(enum MSFSharedColorsTokens)token SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MSFNeutralColorsToken, "NeutralColorsToken", open) {
  MSFNeutralColorsTokenBlack = 0,
  MSFNeutralColorsTokenGrey2 = 1,
  MSFNeutralColorsTokenGrey4 = 2,
  MSFNeutralColorsTokenGrey6 = 3,
  MSFNeutralColorsTokenGrey8 = 4,
  MSFNeutralColorsTokenGrey10 = 5,
  MSFNeutralColorsTokenGrey12 = 6,
  MSFNeutralColorsTokenGrey14 = 7,
  MSFNeutralColorsTokenGrey16 = 8,
  MSFNeutralColorsTokenGrey18 = 9,
  MSFNeutralColorsTokenGrey20 = 10,
  MSFNeutralColorsTokenGrey22 = 11,
  MSFNeutralColorsTokenGrey24 = 12,
  MSFNeutralColorsTokenGrey26 = 13,
  MSFNeutralColorsTokenGrey28 = 14,
  MSFNeutralColorsTokenGrey30 = 15,
  MSFNeutralColorsTokenGrey32 = 16,
  MSFNeutralColorsTokenGrey34 = 17,
  MSFNeutralColorsTokenGrey36 = 18,
  MSFNeutralColorsTokenGrey38 = 19,
  MSFNeutralColorsTokenGrey40 = 20,
  MSFNeutralColorsTokenGrey42 = 21,
  MSFNeutralColorsTokenGrey44 = 22,
  MSFNeutralColorsTokenGrey46 = 23,
  MSFNeutralColorsTokenGrey48 = 24,
  MSFNeutralColorsTokenGrey50 = 25,
  MSFNeutralColorsTokenGrey52 = 26,
  MSFNeutralColorsTokenGrey54 = 27,
  MSFNeutralColorsTokenGrey56 = 28,
  MSFNeutralColorsTokenGrey58 = 29,
  MSFNeutralColorsTokenGrey60 = 30,
  MSFNeutralColorsTokenGrey62 = 31,
  MSFNeutralColorsTokenGrey64 = 32,
  MSFNeutralColorsTokenGrey66 = 33,
  MSFNeutralColorsTokenGrey68 = 34,
  MSFNeutralColorsTokenGrey70 = 35,
  MSFNeutralColorsTokenGrey72 = 36,
  MSFNeutralColorsTokenGrey74 = 37,
  MSFNeutralColorsTokenGrey76 = 38,
  MSFNeutralColorsTokenGrey78 = 39,
  MSFNeutralColorsTokenGrey80 = 40,
  MSFNeutralColorsTokenGrey82 = 41,
  MSFNeutralColorsTokenGrey84 = 42,
  MSFNeutralColorsTokenGrey86 = 43,
  MSFNeutralColorsTokenGrey88 = 44,
  MSFNeutralColorsTokenGrey90 = 45,
  MSFNeutralColorsTokenGrey92 = 46,
  MSFNeutralColorsTokenGrey94 = 47,
  MSFNeutralColorsTokenGrey96 = 48,
  MSFNeutralColorsTokenGrey98 = 49,
  MSFNeutralColorsTokenWhite = 50,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MSFSharedColorSets, "SharedColorSets", open) {
  MSFSharedColorSetsDarkRed = 0,
  MSFSharedColorSetsBurgundy = 1,
  MSFSharedColorSetsCranberry = 2,
  MSFSharedColorSetsRed = 3,
  MSFSharedColorSetsDarkOrange = 4,
  MSFSharedColorSetsBronze = 5,
  MSFSharedColorSetsPumpkin = 6,
  MSFSharedColorSetsOrange = 7,
  MSFSharedColorSetsPeach = 8,
  MSFSharedColorSetsMarigold = 9,
  MSFSharedColorSetsYellow = 10,
  MSFSharedColorSetsGold = 11,
  MSFSharedColorSetsBrass = 12,
  MSFSharedColorSetsBrown = 13,
  MSFSharedColorSetsDarkBrown = 14,
  MSFSharedColorSetsLime = 15,
  MSFSharedColorSetsForest = 16,
  MSFSharedColorSetsSeafoam = 17,
  MSFSharedColorSetsLightGreen = 18,
  MSFSharedColorSetsGreen = 19,
  MSFSharedColorSetsDarkGreen = 20,
  MSFSharedColorSetsLightTeal = 21,
  MSFSharedColorSetsTeal = 22,
  MSFSharedColorSetsDarkTeal = 23,
  MSFSharedColorSetsCyan = 24,
  MSFSharedColorSetsSteel = 25,
  MSFSharedColorSetsLightBlue = 26,
  MSFSharedColorSetsBlue = 27,
  MSFSharedColorSetsRoyalBlue = 28,
  MSFSharedColorSetsDarkBlue = 29,
  MSFSharedColorSetsCornflower = 30,
  MSFSharedColorSetsNavy = 31,
  MSFSharedColorSetsLavender = 32,
  MSFSharedColorSetsPurple = 33,
  MSFSharedColorSetsDarkPurple = 34,
  MSFSharedColorSetsOrchid = 35,
  MSFSharedColorSetsGrape = 36,
  MSFSharedColorSetsBerry = 37,
  MSFSharedColorSetsLilac = 38,
  MSFSharedColorSetsPink = 39,
  MSFSharedColorSetsHotPink = 40,
  MSFSharedColorSetsMagenta = 41,
  MSFSharedColorSetsPlum = 42,
  MSFSharedColorSetsBeige = 43,
  MSFSharedColorSetsMink = 44,
  MSFSharedColorSetsSilver = 45,
  MSFSharedColorSetsPlatinum = 46,
  MSFSharedColorSetsAnchor = 47,
  MSFSharedColorSetsCharcoal = 48,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MSFSharedColorsTokens, "SharedColorsTokens", open) {
  MSFSharedColorsTokensShade50 = 0,
  MSFSharedColorsTokensShade40 = 1,
  MSFSharedColorsTokensShade30 = 2,
  MSFSharedColorsTokensShade20 = 3,
  MSFSharedColorsTokensShade10 = 4,
  MSFSharedColorsTokensPrimary = 5,
  MSFSharedColorsTokensTint10 = 6,
  MSFSharedColorsTokensTint20 = 7,
  MSFSharedColorsTokensTint30 = 8,
  MSFSharedColorsTokensTint40 = 9,
  MSFSharedColorsTokensTint50 = 10,
  MSFSharedColorsTokensTint60 = 11,
};

enum MSFTextColorStyle : NSInteger;
enum MSFTextStyle : NSInteger;
@class NSAttributedString;

/// By default, <code>adjustsFontForContentSizeCategory</code> is set to true to automatically update its font when device’s content size category changes
SWIFT_CLASS_NAMED("Label")
@interface MSFLabel : UILabel
@property (nonatomic) enum MSFTextColorStyle colorStyle;
@property (nonatomic) enum MSFTextStyle style;
/// The maximum allowed size point for the receiver’s font. This property can be used
/// to restrict the largest size of the label when scaling due to Dynamic Type. The
/// default value is 0, indicating there is no maximum size.
@property (nonatomic) CGFloat maxFontSize;
@property (nonatomic, strong) UIColor * _Null_unspecified textColor;
- (nonnull instancetype)initWithStyle:(enum MSFTextStyle)style colorStyle:(enum MSFTextColorStyle)colorStyle OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)didMoveToWindow;
@property (nonatomic, strong) NSAttributedString * _Nullable attributedText;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// Represents a linear gradient as used by FluentUI.
SWIFT_CLASS("_TtC8FluentUI18LinearGradientInfo")
@interface LinearGradientInfo : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum MSFActivityIndicatorSize : NSInteger;
@protocol MSFActivityIndicatorState;

/// UIKit wrapper that exposes the SwiftUI Activity Indicator implementation
SWIFT_CLASS("_TtC8FluentUI20MSFActivityIndicator")
@interface MSFActivityIndicator : ControlHostingView
/// Creates a new MSFActivityIndicator instance.
/// \param size The MSFActivityIndicatorSize value used by the Activity Indicator.
///
- (nonnull instancetype)initWithSize:(enum MSFActivityIndicatorSize)size OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// The object that groups properties that allow control over the Activity Indicator appearance.
@property (nonatomic, readonly, strong) id <MSFActivityIndicatorState> _Nonnull state;
@end

/// Pre-defined sizes of the Activity Indicator.
typedef SWIFT_ENUM(NSInteger, MSFActivityIndicatorSize, open) {
  MSFActivityIndicatorSizeXSmall = 0,
  MSFActivityIndicatorSizeSmall = 1,
  MSFActivityIndicatorSizeMedium = 2,
  MSFActivityIndicatorSizeLarge = 3,
  MSFActivityIndicatorSizeXLarge = 4,
};


/// Properties available to customize the state of the Activity Indicator state
SWIFT_PROTOCOL("_TtP8FluentUI25MSFActivityIndicatorState_")
@protocol MSFActivityIndicatorState
/// Sets the accessibility label for the Activity Indicator.
@property (nonatomic, copy) NSString * _Nullable accessibilityLabel;
/// Sets the color of the Activity Indicator.
@property (nonatomic, strong) UIColor * _Nullable color;
/// Defines whether the Activity Indicator is animating or stopped.
@property (nonatomic) BOOL isAnimating;
/// Defines whether the Activity Indicator is visible when its animation stops.
@property (nonatomic) BOOL hidesWhenStopped;
/// The MSFActivityIndicatorSize value used by the Activity Indicator.
@property (nonatomic) enum MSFActivityIndicatorSize size;
@end

enum MSFAvatarStyle : NSInteger;
enum MSFAvatarSize : NSInteger;
@protocol MSFAvatarState;

/// UIKit wrapper that exposes the SwiftUI Avatar implementation.
SWIFT_CLASS("_TtC8FluentUI9MSFAvatar")
@interface MSFAvatar : ControlHostingView
/// Creates a new MSFAvatar instance.
/// \param style The MSFAvatarStyle value used by the Avatar.
///
/// \param size The MSFAvatarSize value used by the Avatar.
///
- (nonnull instancetype)initWithStyle:(enum MSFAvatarStyle)style size:(enum MSFAvatarSize)size OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// The object that groups properties that allow control over the Avatar appearance.
@property (nonatomic, readonly, strong) id <MSFAvatarState> _Nonnull state;
@end

enum MSFAvatarGroupStyle : NSInteger;
@protocol MSFAvatarGroupState;

/// UIKit wrapper that exposes the SwiftUI AvatarGroup implementation.
SWIFT_CLASS("_TtC8FluentUI14MSFAvatarGroup")
@interface MSFAvatarGroup : ControlHostingView
/// Creates a new MSFAvatarGroup instance.
/// \param style The MSFAvatarGroupStyle value used by the AvatarGroup.
///
/// \param size The MSFAvatarSize value used by the Avatars that will compose the AvatarGroup.
///
- (nonnull instancetype)initWithStyle:(enum MSFAvatarGroupStyle)style size:(enum MSFAvatarSize)size OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// The object that groups properties that allow control over the AvatarGroup appearance.
@property (nonatomic, readonly, strong) id <MSFAvatarGroupState> _Nonnull state;
@end


/// Properties that can be used to customize the appearance of the Avatar in the AvatarGroup.
SWIFT_PROTOCOL("_TtP8FluentUI25MSFAvatarGroupAvatarState_")
@protocol MSFAvatarGroupAvatarState
/// Sets the accessibility label for the Avatar.
@property (nonatomic, copy) NSString * _Nullable accessibilityLabel;
/// Sets a custom background color for the Avatar.
/// The ring color inherit this color if not set explicitly to a different color.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// The custom foreground color.
/// This property allows customizing the initials text color or the default image tint color.
@property (nonatomic, strong) UIColor * _Nullable foregroundColor;
/// Whether the gap between the ring and the avatar content exists.
@property (nonatomic) BOOL hasRingInnerGap;
/// The image used in the avatar content.
@property (nonatomic, strong) UIImage * _Nullable image;
/// The image used to fill the ring as a custom color.
@property (nonatomic, strong) UIImage * _Nullable imageBasedRingColor;
/// Displays an outer ring for the avatar if set to true.
/// The group style does not support rings.
@property (nonatomic) BOOL isRingVisible;
/// Sets the transparency of the avatar elements (inner and outer ring gaps, presence icon outline).
/// Uses the solid default background color if set to false.
@property (nonatomic) BOOL isTransparent;
/// The primary text of the avatar.
/// Used for computing the initials and background/ring colors.
@property (nonatomic, copy) NSString * _Nullable primaryText;
/// Overrides the default ring color.
@property (nonatomic, strong) UIColor * _Nullable ringColor;
/// The secondary text of the avatar.
/// Used for computing the initials and background/ring colors if primaryText is not set.
@property (nonatomic, copy) NSString * _Nullable secondaryText;
@end


/// Properties that can be used to customize the appearance of the AvatarGroup.
SWIFT_PROTOCOL("_TtP8FluentUI19MSFAvatarGroupState_")
@protocol MSFAvatarGroupState
/// Caps the number of displayed avatars and shows the remaining not displayed in the overflow avatar.
@property (nonatomic) NSInteger maxDisplayedAvatars;
/// Adds to the overflow count in case the calling code did not provide all the avatars, but still wants to convey more
/// items than just the remainder of the avatars that could not be displayed due to the maxDisplayedAvatars property.
@property (nonatomic) NSInteger overflowCount;
/// Style of the AvatarGroup.
@property (nonatomic) enum MSFAvatarGroupStyle style;
/// Size of the AvatarGroup.
@property (nonatomic) enum MSFAvatarSize size;
/// Creates a new Avatar within the AvatarGroup.
- (id <MSFAvatarGroupAvatarState> _Nonnull)createAvatar SWIFT_WARN_UNUSED_RESULT;
/// Creates a new Avatar within the AvatarGroup at a specific index.
- (id <MSFAvatarGroupAvatarState> _Nonnull)createAvatarAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the state object for a specific Avatar so its appearance can be customized.
/// \param index The zero-based index of the Avatar in the AvatarGroup.
///
- (id <MSFAvatarGroupAvatarState> _Nonnull)getAvatarStateAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Remove an Avatar from the AvatarGroup.
/// \param index The zero-based index of the Avatar that will be removed from the AvatarGroup.
///
- (void)removeAvatarAt:(NSInteger)index;
@end

/// Enumeration of the styles used by the AvatarGroup.
/// The stack style presents Avatars laid on top of each other.
/// The pile style presents Avatars side by side.
typedef SWIFT_ENUM(NSInteger, MSFAvatarGroupStyle, open) {
  MSFAvatarGroupStyleStack = 0,
  MSFAvatarGroupStylePile = 1,
};

typedef SWIFT_ENUM(NSInteger, MSFAvatarPresence, open) {
  MSFAvatarPresenceNone = 0,
  MSFAvatarPresenceAvailable = 1,
  MSFAvatarPresenceAway = 2,
  MSFAvatarPresenceBlocked = 3,
  MSFAvatarPresenceBusy = 4,
  MSFAvatarPresenceDoNotDisturb = 5,
  MSFAvatarPresenceOffline = 6,
  MSFAvatarPresenceUnknown = 7,
};

/// Pre-defined sizes of the avatar
typedef SWIFT_ENUM(NSInteger, MSFAvatarSize, open) {
  MSFAvatarSizeSize16 = 0,
  MSFAvatarSizeSize20 = 1,
  MSFAvatarSizeSize24 = 2,
  MSFAvatarSizeSize32 = 3,
  MSFAvatarSizeSize40 = 4,
  MSFAvatarSizeSize56 = 5,
  MSFAvatarSizeSize72 = 6,
};


/// Properties that can be used to customize the appearance of the Avatar.
SWIFT_PROTOCOL("_TtP8FluentUI14MSFAvatarState_")
@protocol MSFAvatarState
/// Sets the accessibility label for the Avatar.
@property (nonatomic, copy) NSString * _Nullable accessibilityLabel;
/// Sets a custom background color for the Avatar.
/// The ring color inherit this color if not set explicitly to a different color.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// The custom foreground color.
/// This property allows customizing the initials text color or the default image tint color.
@property (nonatomic, strong) UIColor * _Nullable foregroundColor;
/// Configures the Avatar with a button accessibility trait overriding its default image trait.
@property (nonatomic) BOOL hasButtonAccessibilityTrait;
/// Turns iPad Pointer interaction on/off.
@property (nonatomic) BOOL hasPointerInteraction;
/// Whether the gap between the ring and the avatar content exists.
@property (nonatomic) BOOL hasRingInnerGap;
/// The image used in the avatar content.
@property (nonatomic, strong) UIImage * _Nullable image;
/// The image used to fill the ring as a custom color.
@property (nonatomic, strong) UIImage * _Nullable imageBasedRingColor;
/// Defines whether the avatar state transitions are animated or not. Animations are enabled by default.
@property (nonatomic) BOOL isAnimated;
/// Whether the presence status displays its “Out of office” or standard image.
@property (nonatomic) BOOL isOutOfOffice;
/// Displays an outer ring for the avatar if set to true.
/// The group style does not support rings.
@property (nonatomic) BOOL isRingVisible;
/// Sets the transparency of the avatar elements (inner and outer ring gaps, presence icon outline).
/// Uses the solid default background color if set to false.
@property (nonatomic) BOOL isTransparent;
/// Defines the presence displayed by the Avatar.
/// Image displayed depends on the value of the isOutOfOffice property.
/// Presence is not displayed in the xsmall size.
@property (nonatomic) enum MSFAvatarPresence presence;
/// The primary text of the avatar.
/// Used for computing the initials and background/ring colors.
@property (nonatomic, copy) NSString * _Nullable primaryText;
/// Overrides the default ring color.
@property (nonatomic, strong) UIColor * _Nullable ringColor;
/// The secondary text of the avatar.
/// Used for computing the initials and background/ring colors if primaryText is not set.
@property (nonatomic, copy) NSString * _Nullable secondaryText;
/// Defines the size of the avatar.
/// Presence is not displayed in the xsmall size.
@property (nonatomic) enum MSFAvatarSize size;
/// Defines the style of the avatar (including the fallback appearance if initials can’t be computed and no image is set).
@property (nonatomic) enum MSFAvatarStyle style;
@end

/// Pre-defined styles of the avatar
typedef SWIFT_ENUM(NSInteger, MSFAvatarStyle, open) {
  MSFAvatarStyleDefault = 0,
  MSFAvatarStyleAccent = 1,
  MSFAvatarStyleGroup = 2,
  MSFAvatarStyleOutlined = 3,
  MSFAvatarStyleOutlinedPrimary = 4,
  MSFAvatarStyleOverflow = 5,
};

/// Pre-defined sizes of the customView size.
typedef SWIFT_ENUM(NSInteger, MSFTableViewCellCustomViewSize, open) {
  MSFTableViewCellCustomViewSizeDefault = 0,
  MSFTableViewCellCustomViewSizeZero = 1,
  MSFTableViewCellCustomViewSizeSmall = 2,
  MSFTableViewCellCustomViewSizeMedium = 3,
};


typedef SWIFT_ENUM_NAMED(NSInteger, MSFObscureStyle, "ObscureStyle", open) {
  MSFObscureStyleBlur = 0,
  MSFObscureStyleDim = 1,
};


SWIFT_PROTOCOL_NAMED("Persona")
@protocol MSFPersona
/// The image that represents the persona.
/// Used in the Avatar to replace the initials if provided.
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
/// The color that represents this persona.
/// This color will override the initials view’s background color.
/// If the avatar view is configured to display a ring, this will be the rings’s color.
/// The colored ring will not be displayed if the imageBasedRingColor property is not set to nil.
@property (nonatomic, readonly, strong) UIColor * _Nullable color;
/// An image that can be used the color for the avatar ring.
@property (nonatomic, readonly, strong) UIImage * _Nullable imageBasedRingColor;
/// The e-mail address of the persona. This value is used to calculate the Avatar initials.
@property (nonatomic, readonly, copy) NSString * _Nonnull email;
/// Defines whether the gap between the ring and the avatar content is rendered in case the avatar has a ring.
@property (nonatomic, readonly) BOOL hasRingInnerGap;
/// The name of the Persona. This value is used to calculate the Avatar initials.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The presence status of the persona.
@property (nonatomic, readonly) enum MSFAvatarPresence presence;
/// Sets whether the persona is out of office. This value will be used to calculate the presence image accordingly.
@property (nonatomic) BOOL isOutOfOffice;
/// Defines whether the ring is displayed around the Avatar.
@property (nonatomic, readonly) BOOL isRingVisible;
/// The subtitle value for the persona.
@property (nonatomic, readonly, copy) NSString * _Nonnull subtitle;
@optional
/// Fetches the image asynchronously. This is called when setting up persona row for presentation. Image caching should be handled in the implementation for optimal efficiency.
/// If the <code>image</code> is provided, it will be overrided by the fetched image when completion block is called, acting like a custom placeholder.
/// \param completion The completion block that returns the image
///
- (void)fetchImageWithCompletion:(void (^ _Nonnull)(UIImage * _Nullable))completion;
@end


SWIFT_CLASS_NAMED("PersonaData")
@interface MSFPersonaData : NSObject <MSFPersona>
/// The image that represents the persona.
/// Used in the Avatar to replace the initials if provided.
@property (nonatomic, strong) UIImage * _Nullable image;
/// The e-mail address of the persona. This value is used to calculate the Avatar initials.
@property (nonatomic, copy) NSString * _Nonnull email;
/// An image that can be used the color for the avatar ring.
@property (nonatomic, strong) UIImage * _Nullable imageBasedRingColor;
/// Defines whether the gap between the ring and the avatar content is rendered in case the avatar has a ring.
@property (nonatomic) BOOL hasRingInnerGap;
/// Defines whether the ring is displayed around the Avatar.
@property (nonatomic) BOOL isRingVisible;
/// Sets whether the persona is out of office. This value will be used to calculate the presence image accordingly.
@property (nonatomic) BOOL isOutOfOffice;
/// The color that represents this persona.
/// This color will override the initials view’s background color.
/// If the avatar view is configured to display a ring, this will be the rings’s color.
/// The colored ring will not be displayed if the imageBasedRingColor property is not set to nil.
@property (nonatomic, strong) UIColor * _Nullable color;
/// The name of the Persona. This value is used to calculate the Avatar initials.
@property (nonatomic, copy) NSString * _Nonnull name;
/// The subtitle value for the persona.
@property (nonatomic, copy) NSString * _Nonnull subtitle;
/// The presence status of the persona.
@property (nonatomic) enum MSFAvatarPresence presence;
/// Initializer for PersonaData
/// \param name The persona’s name.
///
/// \param email The persona’s email.
///
/// \param subtitle The persona’s subtitle.
///
/// \param image The persona’s image.
///
/// \param presence The persona’s presence status.
///
/// \param color The persona’s color.
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name email:(NSString * _Nonnull)email subtitle:(NSString * _Nonnull)subtitle image:(UIImage * _Nullable)image presence:(enum MSFAvatarPresence)presence color:(UIColor * _Nullable)color OBJC_DESIGNATED_INITIALIZER;
/// Initializer for PersonaData
/// \param name The persona’s name.
///
/// \param email The persona’s email.
///
/// \param subtitle The persona’s subtitle.
///
/// \param image The persona’s image.
///
/// \param presence The persona’s presence status.
///
/// \param color The persona’s color.
///
/// \param isRingVisible Whether to show a ring.
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name email:(NSString * _Nonnull)email subtitle:(NSString * _Nonnull)subtitle image:(UIImage * _Nullable)image presence:(enum MSFAvatarPresence)presence color:(UIColor * _Nullable)color isRingVisible:(BOOL)isRingVisible OBJC_DESIGNATED_INITIALIZER;
/// Initializer for PersonaData
/// \param firstName The persona’s first name.
///
/// \param lastName The persona’s last name.
///
/// \param email The persona’s email.
///
/// \param subtitle The persona’s subtitle.
///
/// \param image The persona’s image.
///
/// \param presence The persona’s presence status.
///
/// \param color The persona’s color.
///
- (nonnull instancetype)initWithFirstName:(NSString * _Nonnull)firstName lastName:(NSString * _Nonnull)lastName email:(NSString * _Nonnull)email subtitle:(NSString * _Nonnull)subtitle image:(UIImage * _Nullable)image presence:(enum MSFAvatarPresence)presence color:(UIColor * _Nullable)color OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MSFPopupMenuItem;
@class NSIndexPath;
@protocol MSFPopupMenuTemplateItem;
@class MSFPopupMenuSection;

/// <code>PopupMenuController</code> is used to present a popup menu that slides from top or bottom depending on <code>presentationDirection</code>. Use <code>presentationOrigin</code> to specify the vertical offset (in screen coordinates) from which to show popup menu. If not provided it will be calculated automatically: bottom of navigation bar for <code>.down</code> presentation and bottom of the screen for <code>.up</code> presentation.
/// When presented as a slide over, <code>PopupMenuController</code> will have a resizing handle that provides a user an alternative way to dismiss it.
/// <code>PopupMenuController</code> will be presented as a popover on iPad and so requires either <code>sourceView</code>/<code>sourceRect</code> or <code>barButtonItem</code> to be provided via available initializers. Use <code>permittedArrowDirections</code> to specify the direction of the popover arrow.
SWIFT_CLASS_NAMED("PopupMenuController")
@interface MSFPopupMenuController : MSFDrawerController
@property (nonatomic, strong) UIView * _Nullable contentView;
@property (nonatomic) enum MSFDrawerPresentationStyle presentationStyle;
@property (nonatomic) enum MSFDrawerResizingBehavior resizingBehavior;
@property (nonatomic) CGSize preferredContentSize;
/// Set <code>backgroundColor</code> to customize background color of controller’ view and its tableView
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// Set <code>headerItem</code> to show a menu header. If <code>subtitle</code> is present then a 2-line header will be shown. If only <code>title</code> is provided then a 1-line description will be presented. In this case a multi-line text is supported.
/// Header is not interactable and does not scroll.
@property (nonatomic, strong) MSFPopupMenuItem * _Nullable headerItem;
/// Use <code>selectedItemIndexPath</code> to get or set the selected menu item instead of doing this via <code>PopupMenuItem</code> directly
@property (nonatomic, copy) NSIndexPath * _Nullable selectedItemIndexPath;
/// set <code>separatorColor</code> to customize separator colors of  PopupMenuItem cells and the drawer
@property (nonatomic, strong) UIColor * _Nonnull separatorColor;
/// Append new items to the last section of the menu
/// note:
/// If there is no section in the menu, create a new one without header and append the items to it
- (void)addItems:(NSArray<id <MSFPopupMenuTemplateItem>> * _Nonnull)items;
/// Append a new section to the end of menu
- (void)addSection:(MSFPopupMenuSection * _Nonnull)section;
/// Append new sections to the end of menu
- (void)addSections:(NSArray<MSFPopupMenuSection *> * _Nonnull)sections;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (nonnull instancetype)initWithSourceView:(UIView * _Nonnull)sourceView sourceRect:(CGRect)sourceRect presentationOrigin:(CGFloat)presentationOrigin presentationDirection:(enum MSFDrawerPresentationDirection)presentationDirection preferredMaximumHeight:(CGFloat)preferredMaximumHeight OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBarButtonItem:(UIBarButtonItem * _Nonnull)barButtonItem presentationOrigin:(CGFloat)presentationOrigin presentationDirection:(enum MSFDrawerPresentationDirection)presentationDirection preferredMaximumHeight:(CGFloat)preferredMaximumHeight OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UITableView;
@class UITableViewCell;

@interface MSFPopupMenuController (SWIFT_EXTENSION(FluentUI)) <UITableViewDataSource>
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


@interface MSFPopupMenuController (SWIFT_EXTENSION(FluentUI)) <UITableViewDelegate>
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForFooterInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForFooterInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end

@protocol MSFPopupMenuItemTemplateCell;

/// <code>PopupMenuTemplateItem</code> represents a template item protocol inside <code>PopupMenuController</code>.
/// The built-in type is <code>PopupMenuItem</code>.
/// You can use object conforms to this protocol for customization.
SWIFT_PROTOCOL_NAMED("PopupMenuTemplateItem")
@protocol MSFPopupMenuTemplateItem
/// The custom cell class for <code>PopupMenuController</code>
@property (nonatomic) Class <MSFPopupMenuItemTemplateCell> _Nonnull cellClass;
@property (nonatomic, readonly) enum MSFPopupMenuItemExecutionMode executionMode;
@property (nonatomic) BOOL isSelected;
@property (nonatomic, readonly, copy) void (^ _Nullable onSelected)(void);
@end


/// <code>PopupMenuItem</code> represents a menu item inside <code>PopupMenuController</code>.
SWIFT_CLASS_NAMED("PopupMenuItem")
@interface MSFPopupMenuItem : NSObject <MSFPopupMenuTemplateItem>
@property (nonatomic) Class <MSFPopupMenuItemTemplateCell> _Nonnull cellClass;
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
@property (nonatomic, readonly, strong) UIImage * _Nullable selectedImage;
@property (nonatomic, readonly, strong) UIImage * _Nullable accessoryImage;
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic, readonly, copy) NSString * _Nullable subtitle;
@property (nonatomic, readonly, strong) UIView * _Nullable accessoryView;
@property (nonatomic, readonly) enum MSFPopupMenuItemExecutionMode executionMode;
@property (nonatomic) BOOL isEnabled;
@property (nonatomic) BOOL isSelected;
/// <code>title</code> color
@property (nonatomic, strong) UIColor * _Nonnull titleColor;
/// <code>subtitle</code> color
@property (nonatomic, strong) UIColor * _Nonnull subtitleColor;
/// <code>image</code> tint color if it is rendered as template
@property (nonatomic, strong) UIColor * _Nonnull imageColor;
/// <code>title</code> color when<code>isSelected</code> is true. If unset, Colors.primary will be used
@property (nonatomic, strong) UIColor * _Nullable titleSelectedColor;
/// <code>subtitle</code> color when<code>isSelected</code> is true.  If unset, Colors.primary will be used
@property (nonatomic, strong) UIColor * _Nullable subtitleSelectedColor;
/// tint color if <code>selectedImage</code> is rendered as template and <code>isSelected</code> is true.  Is unset, Colors.primary will be used
@property (nonatomic, strong) UIColor * _Nullable imageSelectedColor;
/// background color of PopupMenuItem corresponding cell
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// checkmark color <code>isAccessoryCheckmarkVisible</code> and <code>isSelected</code> is true. If unset, Colors.primary will be used
@property (nonatomic, strong) UIColor * _Nullable accessoryCheckmarkColor;
@property (nonatomic, readonly, copy) void (^ _Nullable onSelected)(void);
@property (nonatomic, readonly) BOOL isAccessoryCheckmarkVisible;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image selectedImage:(UIImage * _Nullable)selectedImage accessoryImage:(UIImage * _Nullable)accessoryImage title:(NSString * _Nonnull)title subtitle:(NSString * _Nullable)subtitle accessoryView:(UIView * _Nullable)accessoryView isEnabled:(BOOL)isEnabled isSelected:(BOOL)isSelected executes:(enum MSFPopupMenuItemExecutionMode)executionMode onSelected:(void (^ _Nullable)(void))onSelected isAccessoryCheckmarkVisible:(BOOL)isAccessoryCheckmarkVisible OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImageName:(NSString * _Nonnull)imageName generateSelectedImage:(BOOL)generateSelectedImage title:(NSString * _Nonnull)title subtitle:(NSString * _Nullable)subtitle isEnabled:(BOOL)isEnabled isSelected:(BOOL)isSelected executes:(enum MSFPopupMenuItemExecutionMode)executionMode onSelected:(void (^ _Nullable)(void))onSelected isAccessoryCheckmarkVisible:(BOOL)isAccessoryCheckmarkVisible;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum MSFTableViewCellSeparatorType : NSInteger;

/// <code>PopupMenuItemTemplateCell</code> represents a template cell protocol inside <code>PopupMenuController</code>.
/// The built-in type is <code>PopupMenuItemCell</code>.
/// If you are making a custom object conform to this protocol, it must be a <code>UITableViewCell</code> for the Pop Up Menu to work properly
SWIFT_PROTOCOL_NAMED("PopupMenuItemTemplateCell")
@protocol MSFPopupMenuItemTemplateCell
/// <code>PopupMenuController</code> will notify that one or more items in the list contain image(s)
@property (nonatomic) BOOL preservesSpaceForImage;
/// <code>PopupMenuController</code> will notify the custom separatorColor.
/// For custom cell, you should add your own separator.
@property (nonatomic, strong) UIColor * _Nullable customSeparatorColor;
/// <code>PopupMenuController</code> will notify the expected bottom separatorType.
/// For <code>PopupMenuItemCell</code>, the separator is at the bottom.
@property (nonatomic) enum MSFTableViewCellSeparatorType bottomSeparatorType;
/// Called when <code>PopupMenuController</code> setup the cell with the item
- (void)setupWithItem:(id <MSFPopupMenuTemplateItem> _Nonnull)item;
+ (CGFloat)preferredWidthFor:(id <MSFPopupMenuTemplateItem> _Nonnull)item preservingSpaceForImage:(BOOL)preserveSpaceForImage SWIFT_WARN_UNUSED_RESULT;
+ (CGFloat)preferredHeightFor:(id <MSFPopupMenuTemplateItem> _Nonnull)item SWIFT_WARN_UNUSED_RESULT;
@end


/// <code>PopupMenuSection</code> represents a section of menu items inside <code>PopupMenuController</code>.
SWIFT_CLASS_NAMED("PopupMenuSection")
@interface MSFPopupMenuSection : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSArray<id <MSFPopupMenuTemplateItem>> * _Nonnull items;
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title items:(NSArray<id <MSFPopupMenuTemplateItem>> * _Nonnull)items OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("ResizingHandleView")
@interface MSFResizingHandleView : UIView
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat height;)
+ (CGFloat)height SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSubviews;
@end

enum MSFSeparatorStyle : NSInteger;
enum MSFSeparatorOrientation : NSInteger;

SWIFT_CLASS_NAMED("Separator")
@interface MSFSeparator : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithStyle:(enum MSFSeparatorStyle)style orientation:(enum MSFSeparatorOrientation)orientation OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// The default thickness for the separator: half pt.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat thickness;)
+ (CGFloat)thickness SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MSFSeparatorOrientation, "SeparatorOrientation", open) {
  MSFSeparatorOrientationHorizontal = 0,
  MSFSeparatorOrientationVertical = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MSFSeparatorStyle, "SeparatorStyle", open) {
  MSFSeparatorStyleDefault = 0,
  MSFSeparatorStyleShadow = 1,
};


/// Represents a two-part shadow as used by FluentUI.
SWIFT_CLASS_NAMED("ShadowInfo")
@interface MSFShadowInfo : NSObject
/// The color of the shadow for shadow 1.
@property (nonatomic, readonly, strong) MSFDynamicColor * _Nonnull colorOne;
/// The blur of the shadow for shadow 1.
@property (nonatomic, readonly) CGFloat blurOne;
/// The horizontal offset of the shadow for shadow 1.
@property (nonatomic, readonly) CGFloat xOne;
/// The vertical offset of the shadow for shadow 1.
@property (nonatomic, readonly) CGFloat yOne;
/// The color of the shadow for shadow 2.
@property (nonatomic, readonly, strong) MSFDynamicColor * _Nonnull colorTwo;
/// The blur of the shadow for shadow 2.
@property (nonatomic, readonly) CGFloat blurTwo;
/// The horizontal offset of the shadow for shadow 2.
@property (nonatomic, readonly) CGFloat xTwo;
/// The vertical offset of the shadow for shadow 2.
@property (nonatomic, readonly) CGFloat yTwo;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum MSFTableViewCellAccessoryType : NSInteger;
enum MSFTableViewCellBackgroundStyleType : NSInteger;
@class UITouch;
@class UIEvent;
@class UICellConfigurationState;

/// <code>TableViewCell</code> is used to present a cell with one, two, or three lines of text with an optional custom view and an accessory.
/// The <code>title</code> is displayed as the first line of text with the <code>subtitle</code> as the second line and the <code>footer</code> the third line.
/// If a <code>subtitle</code> and <code>footer</code> are not provided the cell will be configured as a “small” size cell showing only the <code>title</code> line of text and a smaller custom view.
/// If a <code>subtitle</code> is provided and a <code>footer</code> is not provided the cell will display two lines of text and will leave space for the <code>title</code> if it is not provided.
/// If a <code>footer</code> is provided the cell will display three lines of text and will leave space for the <code>subtitle</code> and <code>title</code> if they are not provided.
/// If a <code>customView</code> is not provided the <code>customView</code> will be hidden and the displayed text will take up the empty space left by the hidden <code>customView</code>.
/// Specify <code>accessoryType</code> on setup to show either a disclosure indicator or a <code>detailButton</code>. The <code>detailButton</code> will display a button with an ellipsis icon which can be configured by passing in a closure to the cell’s <code>onAccessoryTapped</code> property or by implementing UITableViewDelegate’s <code>accessoryButtonTappedForRowWith</code> method.
/// NOTE: This cell implements its own custom separator. Make sure to remove the UITableViewCell built-in separator by setting <code>separatorStyle = .none</code> on your table view. To remove the cell’s custom separator set <code>bottomSeparatorType</code> to <code>.none</code>.
SWIFT_CLASS_NAMED("TableViewCell")
@interface MSFTableViewCell : UITableViewCell
/// The height for the cell based on the text provided. Useful when <code>numberOfLines</code> of <code>title</code>, <code>subtitle</code>, <code>footer</code> is 1.
/// <code>smallHeight</code> - Height for the cell when only the <code>title</code> is provided in a single line of text.
/// <code>mediumHeight</code> - Height for the cell when only the <code>title</code> and <code>subtitle</code> are provided in 2 lines of text.
/// <code>largeHeight</code> - Height for the cell when the <code>title</code>, <code>subtitle</code>, and <code>footer</code> are provided in 3 lines of text.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat smallHeight;)
+ (CGFloat)smallHeight SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat mediumHeight;)
+ (CGFloat)mediumHeight SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat largeHeight;)
+ (CGFloat)largeHeight SWIFT_WARN_UNUSED_RESULT;
/// Identifier string for TableViewCell
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull identifier;)
+ (NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// A constant representing the number of lines for a label in which no change will be made when the <code>preferredContentSizeCategory</code> returns a size greater than <code>.large</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger defaultNumberOfLinesForLargerDynamicType;)
+ (NSInteger)defaultNumberOfLinesForLargerDynamicType SWIFT_WARN_UNUSED_RESULT;
/// The default leading padding in the cell.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat defaultPaddingLeading;)
+ (CGFloat)defaultPaddingLeading SWIFT_WARN_UNUSED_RESULT;
/// The default trailing padding in the cell.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat defaultPaddingTrailing;)
+ (CGFloat)defaultPaddingTrailing SWIFT_WARN_UNUSED_RESULT;
/// The height of the cell based on the height of its content.
/// \param title The title string
///
/// \param subtitle The subtitle string
///
/// \param footer The footer string
///
/// \param titleLeadingAccessoryView The accessory view on the leading edge of the title
///
/// \param titleTrailingAccessoryView The accessory view on the trailing edge of the title
///
/// \param subtitleLeadingAccessoryView The accessory view on the leading edge of the subtitle
///
/// \param subtitleTrailingAccessoryView The accessory view on the trailing edge of the subtitle
///
/// \param footerLeadingAccessoryView The accessory view on the leading edge of the footer
///
/// \param footerTrailingAccessoryView The accessory view on the trailing edge of the footer
///
/// \param customViewSize The custom view size for the cell based on <code>TableViewCell.CustomViewSize</code>
///
/// \param customAccessoryView The custom accessory view that appears near the trailing edge of the cell
///
/// \param accessoryType The <code>TableViewCellAccessoryType</code> that the cell should display
///
/// \param titleNumberOfLines The number of lines that the title should display
///
/// \param subtitleNumberOfLines The number of lines that the subtitle should display
///
/// \param footerNumberOfLines The number of lines that the footer should display
///
/// \param customAccessoryViewExtendsToEdge Boolean defining whether custom accessory view is extended to the trailing edge of the cell or not (ignored when accessory type is not <code>.none</code>)
///
/// \param containerWidth The width of the cell’s super view (e.g. the table view’s width)
///
/// \param isInSelectionMode Boolean describing if the cell is in multi-selection mode which shows/hides a checkmark image on the leading edge
///
///
/// returns:
/// a value representing the calculated height of the cell
+ (CGFloat)heightWithTitle:(NSString * _Nonnull)title subtitle:(NSString * _Nonnull)subtitle footer:(NSString * _Nonnull)footer titleLeadingAccessoryView:(UIView * _Nullable)titleLeadingAccessoryView titleTrailingAccessoryView:(UIView * _Nullable)titleTrailingAccessoryView subtitleLeadingAccessoryView:(UIView * _Nullable)subtitleLeadingAccessoryView subtitleTrailingAccessoryView:(UIView * _Nullable)subtitleTrailingAccessoryView footerLeadingAccessoryView:(UIView * _Nullable)footerLeadingAccessoryView footerTrailingAccessoryView:(UIView * _Nullable)footerTrailingAccessoryView customViewSize:(enum MSFTableViewCellCustomViewSize)customViewSize customAccessoryView:(UIView * _Nullable)customAccessoryView accessoryType:(enum MSFTableViewCellAccessoryType)accessoryType titleNumberOfLines:(NSInteger)titleNumberOfLines subtitleNumberOfLines:(NSInteger)subtitleNumberOfLines footerNumberOfLines:(NSInteger)footerNumberOfLines customAccessoryViewExtendsToEdge:(BOOL)customAccessoryViewExtendsToEdge containerWidth:(CGFloat)containerWidth isInSelectionMode:(BOOL)isInSelectionMode SWIFT_WARN_UNUSED_RESULT;
/// The preferred width of the cell based on the width of its content.
/// \param title The title string
///
/// \param subtitle The subtitle string
///
/// \param footer The footer string
///
/// \param titleLeadingAccessoryView The accessory view on the leading edge of the title
///
/// \param titleTrailingAccessoryView The accessory view on the trailing edge of the title
///
/// \param subtitleLeadingAccessoryView The accessory view on the leading edge of the subtitle
///
/// \param subtitleTrailingAccessoryView The accessory view on the trailing edge of the subtitle
///
/// \param footerLeadingAccessoryView The accessory view on the leading edge of the footer
///
/// \param footerTrailingAccessoryView The accessory view on the trailing edge of the footer
///
/// \param customViewSize The custom view size for the cell based on <code>TableViewCell.CustomViewSize</code>
///
/// \param customAccessoryView The custom accessory view that appears near the trailing edge of the cell
///
/// \param accessoryType The <code>TableViewCellAccessoryType</code> that the cell should display
///
/// \param customAccessoryViewExtendsToEdge Boolean defining whether custom accessory view is extended to the trailing edge of the cell or not (ignored when accessory type is not <code>.none</code>)
///
/// \param isInSelectionMode Boolean describing if the cell is in multi-selection mode which shows/hides a checkmark image on the leading edge
///
///
/// returns:
/// a value representing the preferred width of the cell
+ (CGFloat)preferredWidthWithTitle:(NSString * _Nonnull)title subtitle:(NSString * _Nonnull)subtitle footer:(NSString * _Nonnull)footer titleLeadingAccessoryView:(UIView * _Nullable)titleLeadingAccessoryView titleTrailingAccessoryView:(UIView * _Nullable)titleTrailingAccessoryView subtitleLeadingAccessoryView:(UIView * _Nullable)subtitleLeadingAccessoryView subtitleTrailingAccessoryView:(UIView * _Nullable)subtitleTrailingAccessoryView footerLeadingAccessoryView:(UIView * _Nullable)footerLeadingAccessoryView footerTrailingAccessoryView:(UIView * _Nullable)footerTrailingAccessoryView customViewSize:(enum MSFTableViewCellCustomViewSize)customViewSize customAccessoryView:(UIView * _Nullable)customAccessoryView accessoryType:(enum MSFTableViewCellAccessoryType)accessoryType customAccessoryViewExtendsToEdge:(BOOL)customAccessoryViewExtendsToEdge isInSelectionMode:(BOOL)isInSelectionMode SWIFT_WARN_UNUSED_RESULT;
/// Text that appears as the first line of text
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// Text that appears as the second line of text
@property (nonatomic, readonly, copy) NSString * _Nonnull subtitle;
/// Text that appears as the third line of text
@property (nonatomic, readonly, copy) NSString * _Nonnull footer;
/// The attributedText for the title.
@property (nonatomic, strong) NSAttributedString * _Nullable attributedTitle;
/// The attributedText for the subtitle.
@property (nonatomic, strong) NSAttributedString * _Nullable attributedSubtitle;
/// The attributedText for the footer.
@property (nonatomic, strong) NSAttributedString * _Nullable attributedFooter;
/// The leading padding.
@property (nonatomic) CGFloat paddingLeading;
/// The trailing padding.
@property (nonatomic) CGFloat paddingTrailing;
/// The maximum number of lines to be shown for <code>title</code>
@property (nonatomic) NSInteger titleNumberOfLines;
/// The maximum number of lines to be shown for <code>subtitle</code>
@property (nonatomic) NSInteger subtitleNumberOfLines;
/// The maximum number of lines to be shown for <code>footer</code>
@property (nonatomic) NSInteger footerNumberOfLines;
/// The number of lines to show for the <code>title</code> if <code>preferredContentSizeCategory</code> is set to a size greater than <code>.large</code>. The default value indicates that no change will be made to the <code>title</code> and <code>titleNumberOfLines</code> will be used for all content sizes.
@property (nonatomic) NSInteger titleNumberOfLinesForLargerDynamicType;
/// The number of lines to show for the <code>subtitle</code> if <code>preferredContentSizeCategory</code> is set to a size greater than <code>.large</code>. The default value indicates that no change will be made to the <code>subtitle</code> and <code>subtitleNumberOfLines</code> will be used for all content sizes.
@property (nonatomic) NSInteger subtitleNumberOfLinesForLargerDynamicType;
/// The number of lines to show for the <code>footer</code> if <code>preferredContentSizeCategory</code> is set to a size greater than <code>.large</code>. The default value indicates that no change will be made to the <code>footer</code> and <code>footerNumberOfLines</code> will be used for all content sizes.
@property (nonatomic) NSInteger footerNumberOfLinesForLargerDynamicType;
/// Updates the lineBreakMode of the <code>title</code>
@property (nonatomic) NSLineBreakMode titleLineBreakMode;
/// Updates the lineBreakMode of the <code>subtitle</code>
@property (nonatomic) NSLineBreakMode subtitleLineBreakMode;
/// Updates the lineBreakMode of the <code>footer</code>
@property (nonatomic) NSLineBreakMode footerLineBreakMode;
/// The accessory view on the leading edge of the title
@property (nonatomic, strong) UIView * _Nullable titleLeadingAccessoryView;
/// The accessory view on the trailing edge of the title
@property (nonatomic, strong) UIView * _Nullable titleTrailingAccessoryView;
/// The accessory view on the leading edge of the subtitle
@property (nonatomic, strong) UIView * _Nullable subtitleLeadingAccessoryView;
/// The accessory view on the trailing edge of the subtitle
@property (nonatomic, strong) UIView * _Nullable subtitleTrailingAccessoryView;
/// The accessory view on the leading edge of the footer
@property (nonatomic, strong) UIView * _Nullable footerLeadingAccessoryView;
/// The accessory view on the trailing edge of the footer
@property (nonatomic, strong) UIView * _Nullable footerTrailingAccessoryView;
/// Override to set a specific <code>MSFTableViewCellCustomViewSize</code> on the <code>customView</code>
@property (nonatomic) enum MSFTableViewCellCustomViewSize customViewSize;
/// The custom accessory view of the TableViewCell.
@property (nonatomic, readonly, strong) UIView * _Nullable customAccessoryView;
/// Extends custom accessory view to the trailing edge of the cell. Ignored when accessory type is not <code>.none</code> since in this case the built-in accessory is placed at the edge of the cell preventing custom accessory view from extending.
@property (nonatomic) BOOL customAccessoryViewExtendsToEdge;
/// Style describing whether or not the cell’s top separator should be visible and how wide it should extend
@property (nonatomic) enum MSFTableViewCellSeparatorType topSeparatorType;
/// Style describing whether or not the cell’s bottom separator should be visible and how wide it should extend
@property (nonatomic) enum MSFTableViewCellSeparatorType bottomSeparatorType;
@property (nonatomic) enum MSFTableViewCellBackgroundStyleType backgroundStyleType;
/// When <code>isEnabled</code> is <code>false</code>, disables ability for a user to interact with a cell and dims cell’s contents
@property (nonatomic) BOOL isEnabled;
/// Enables / disables multi-selection mode by showing / hiding a checkmark selection indicator on the leading edge
@property (nonatomic) BOOL isInSelectionMode;
/// <code>onAccessoryTapped</code> is called when <code>detailButton</code> accessory view is tapped
@property (nonatomic, copy) void (^ _Nullable onAccessoryTapped)(void);
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@property (nonatomic) CGRect bounds;
@property (nonatomic) CGRect frame;
@property (nonatomic, copy) NSString * _Nullable accessibilityHint;
@property (nonatomic, copy) NSString * _Nullable accessibilityValue;
@property (nonatomic) CGPoint accessibilityActivationPoint;
/// Initializes TableViewCell with the cell style.
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Sets up the cell with text, a custom view, a custom accessory view, and an accessory type
/// \param title Text that appears as the first line of text
///
/// \param subtitle Text that appears as the second line of text
///
/// \param footer Text that appears as the third line of text
///
/// \param customView The custom view that appears near the leading edge next to the text
///
/// \param customAccessoryView The view acting as an accessory view that appears on the trailing edge, next to the accessory type if provided
///
/// \param accessoryType The type of accessory that appears on the trailing edge: a disclosure indicator or a details button with an ellipsis icon
///
- (void)setupWithTitle:(NSString * _Nonnull)title subtitle:(NSString * _Nonnull)subtitle footer:(NSString * _Nonnull)footer customView:(UIView * _Nullable)customView customAccessoryView:(UIView * _Nullable)customAccessoryView accessoryType:(enum MSFTableViewCellAccessoryType)accessoryType;
/// Sets up the cell with text, a custom view, a custom accessory view, and an accessory type
/// \param title Text that appears as the first line of text
///
/// \param attributedTitle Optional attributed text for the first line of text. If this is not set, the title will be used
///
/// \param subtitle Text that appears as the second line of text
///
/// \param attributedSubtitle Optional attributed text for the second line of text. If this is not set, the subtitle will be used
///
/// \param footer Text that appears as the third line of text
///
/// \param attributedFooter Optional attributed text for the third line of text. If this is not set, the footer will be used
///
/// \param customView The custom view that appears near the leading edge next to the text
///
/// \param customAccessoryView The view acting as an accessory view that appears on the trailing edge, next to the accessory type if provided
///
/// \param accessoryType The type of accessory that appears on the trailing edge: a disclosure indicator or a details button with an ellipsis icon
///
- (void)setupWithTitle:(NSString * _Nonnull)title attributedTitle:(NSAttributedString * _Nullable)attributedTitle subtitle:(NSString * _Nonnull)subtitle attributedSubtitle:(NSAttributedString * _Nullable)attributedSubtitle footer:(NSString * _Nonnull)footer attributedFooter:(NSAttributedString * _Nullable)attributedFooter customView:(UIView * _Nullable)customView customAccessoryView:(UIView * _Nullable)customAccessoryView accessoryType:(enum MSFTableViewCellAccessoryType)accessoryType;
/// Allows to change the accessory type without doing a full <code>setup</code>.
- (void)changeAccessoryTypeTo:(enum MSFTableViewCellAccessoryType)accessoryType;
/// Sets the multi-selection state of the cell, optionally animating the transition between states.
/// \param isInSelectionMode true to set the cell as in selection mode, false to set it as not in selection mode. The default is false.
///
/// \param animated true to animate the transition in / out of selection mode, false to make the transition immediate.
///
- (void)setIsInSelectionMode:(BOOL)isInSelectionMode animated:(BOOL)animated;
/// Any color or stylistic changes on TableViewCell labels should be done through attributedTitle
/// To set color for title label
/// \param color UIColor to set
///
- (void)setTitleLabelTextColorWithColor:(UIColor * _Nonnull)color SWIFT_DEPRECATED_MSG("Any color or stylistic changes on TableViewCell labels should be done through NSAttributedString (attributedTitle parameter of the setup method).");
/// Any color or stylistic changes on TableViewCell labels should be done through attributedSubtitle
/// To set color for subTitle label
/// \param color UIColor to set
///
- (void)setSubTitleLabelTextColorWithColor:(UIColor * _Nonnull)color SWIFT_DEPRECATED_MSG("Any color or stylistic changes on TableViewCell labels should be done through NSAttributedString (attributedSubtitle parameter of the setup method).");
- (void)layoutSubviews;
- (void)prepareForReuse;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)didMoveToWindow;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (void)_bridgedUpdateConfigurationUsingState:(UICellConfigurationState * _Nonnull)state;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MSFTableViewCellSeparatorType, "SeparatorType", open) {
  MSFTableViewCellSeparatorTypeNone = 0,
  MSFTableViewCellSeparatorTypeInset = 1,
  MSFTableViewCellSeparatorTypeFull = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MSFTableViewCellAccessoryType, "TableViewCellAccessoryType", open) {
  MSFTableViewCellAccessoryTypeNone = 0,
  MSFTableViewCellAccessoryTypeDisclosureIndicator = 1,
  MSFTableViewCellAccessoryTypeDetailButton = 2,
  MSFTableViewCellAccessoryTypeCheckmark = 3,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MSFTableViewCellBackgroundStyleType, "TableViewCellBackgroundStyleType", open) {
  MSFTableViewCellBackgroundStyleTypePlain = 0,
  MSFTableViewCellBackgroundStyleTypeGrouped = 1,
  MSFTableViewCellBackgroundStyleTypeClear = 2,
  MSFTableViewCellBackgroundStyleTypeCustom = 3,
};

enum MSFTableViewHeaderFooterViewStyle : NSInteger;
enum MSFTableViewHeaderFooterViewAccessoryButtonStyle : NSInteger;
@protocol MSFTableViewHeaderFooterViewDelegate;

/// <code>TableViewHeaderFooterView</code> is used to present a section header or footer with a <code>title</code> and an optional accessory button.
/// Set the <code>TableViewHeaderFooterView.Style</code> of the view to specify its visual style. The <code>default</code> and <code>headerPrimary</code> style may be used for headers.
/// The <code>footer</code> style, which lays out the <code>title</code> near the top of the view, may be used for footers in grouped lists. Use <code>divider</code> and <code>dividerHighlighted</code> as headers for plain lists.
/// The optional accessory button should only be used with <code>default</code> style headers with the <code>title</code> as a single line of text.
/// Use <code>titleNumberOfLines</code> to configure the number of lines for the <code>title</code>. Headers generally use the default number of lines of 1 while footers may use a multiple number of lines.
SWIFT_CLASS_NAMED("TableViewHeaderFooterView")
@interface MSFTableViewHeaderFooterView : UITableViewHeaderFooterView
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull identifier;)
+ (NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// The height of the view based on the height of its content.
/// \param style The <code>TableViewHeaderFooterView.Style</code> used to set up the view.
///
/// \param title The title string.
///
/// \param titleNumberOfLines The number of lines that the title should display.
///
/// \param containerWidth The width of the view’s super view (e.g. the table view’s width).
///
/// \param accessoryView An optional accessory view that appears near the trailing edge of the view.
///
///
/// returns:
/// a value representing the calculated height of the view.
+ (CGFloat)heightWithStyle:(enum MSFTableViewHeaderFooterViewStyle)style title:(NSString * _Nonnull)title titleNumberOfLines:(NSInteger)titleNumberOfLines containerWidth:(CGFloat)containerWidth accessoryView:(UIView * _Nullable)accessoryView SWIFT_WARN_UNUSED_RESULT;
/// The preferred width of the view based on the width of its content.
/// \param style The <code>TableViewHeaderFooterView.Style</code> used to set up the view.
///
/// \param title The title string.
///
/// \param accessoryView An optional accessory view that appears near the trailing edge of the view.
///
/// \param leadingView An optional custom view that appears near the leading edge of the view.
///
///
/// returns:
/// a value representing the calculated preferred width of the view.
+ (CGFloat)preferredWidthWithStyle:(enum MSFTableViewHeaderFooterViewStyle)style title:(NSString * _Nonnull)title accessoryView:(UIView * _Nullable)accessoryView leadingView:(UIView * _Nullable)leadingView SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) enum MSFTableViewHeaderFooterViewAccessoryButtonStyle accessoryButtonStyle;
/// The maximum number of lines to be shown for <code>title</code>
@property (nonatomic) NSInteger titleNumberOfLines;
/// <code>onAccessoryButtonTapped</code> is called when <code>accessoryButton</code> is tapped
@property (nonatomic, copy) void (^ _Nullable onAccessoryButtonTapped)(void);
@property (nonatomic, copy) void (^ _Nullable onHeaderViewTapped)(void);
@property (nonatomic, weak) id <MSFTableViewHeaderFooterViewDelegate> _Nullable delegate;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@property (nonatomic) CGRect bounds;
@property (nonatomic) CGRect frame;
- (nonnull instancetype)initWithReuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Sets up the titleView based off of the following parameters:
/// \param style The <code>TableViewHeaderFooterView.Style</code> used to set up the view.
///
/// \param title The title string.
///
/// \param accessoryButtonTitle Optional accessory button title string.
///
- (void)setupWithStyle:(enum MSFTableViewHeaderFooterViewStyle)style title:(NSString * _Nonnull)title accessoryButtonTitle:(NSString * _Nonnull)accessoryButtonTitle;
/// \param style The <code>TableViewHeaderFooterView.Style</code> used to set up the view.
///
/// \param title The title string.
///
/// \param accessoryButtonTitle Optional accessory button title string.
///
/// \param leadingView An optional custom view that appears near the leading edge of the view.
///
- (void)setupWithStyle:(enum MSFTableViewHeaderFooterViewStyle)style title:(NSString * _Nonnull)title accessoryButtonTitle:(NSString * _Nonnull)accessoryButtonTitle leadingView:(UIView * _Nullable)leadingView;
/// \param style The <code>TableViewHeaderFooterView.Style</code> used to set up the view.
///
/// \param attributedTitle Title as an NSAttributedString for additional attributes.
///
/// \param accessoryButtonTitle Optional accessory button title string.
///
- (void)setupWithStyle:(enum MSFTableViewHeaderFooterViewStyle)style attributedTitle:(NSAttributedString * _Nonnull)attributedTitle accessoryButtonTitle:(NSString * _Nonnull)accessoryButtonTitle;
/// \param style The <code>TableViewHeaderFooterView.Style</code> used to set up the view.
///
/// \param attributedTitle Title as an NSAttributedString for additional attributes.
///
/// \param accessoryButtonTitle Optional accessory button title string.
///
/// \param leadingView An optional custom view that appears near the leading edge of the view.
///
- (void)setupWithStyle:(enum MSFTableViewHeaderFooterViewStyle)style attributedTitle:(NSAttributedString * _Nonnull)attributedTitle accessoryButtonTitle:(NSString * _Nonnull)accessoryButtonTitle leadingView:(UIView * _Nullable)leadingView;
/// \param style The <code>TableViewHeaderFooterView.Style</code> used to set up the view.
///
/// \param title The title string.
///
/// \param accessoryView The optional custom accessory view in the trailing edge of this view.
///
- (void)setupWithStyle:(enum MSFTableViewHeaderFooterViewStyle)style title:(NSString * _Nonnull)title accessoryView:(UIView * _Nonnull)accessoryView;
/// \param style The <code>TableViewHeaderFooterView.Style</code> used to set up the view.
///
/// \param title The title string.
///
/// \param accessoryView The optional custom accessory view in the trailing edge of this view.
///
/// \param leadingView An optional custom view that appears near the leading edge of the view.
/// If <code>accessoryView</code> is set, the accessory button (if any) will be replaced by this custom view. Clients are responsible
/// for the appearance and behavior of both the <code>accessoryView</code> and <code>leadingView</code>, including event handling and accessibility.
///
- (void)setupWithStyle:(enum MSFTableViewHeaderFooterViewStyle)style title:(NSString * _Nonnull)title accessoryView:(UIView * _Nonnull)accessoryView leadingView:(UIView * _Nullable)leadingView;
/// \param style The <code>TableViewHeaderFooterView.Style</code> used to set up the view.
///
/// \param accessoryButtonTitle Optional accessory button title string.
///
- (void)setupWithStyle:(enum MSFTableViewHeaderFooterViewStyle)style accessoryButtonTitle:(NSString * _Nonnull)accessoryButtonTitle;
/// \param style The <code>TableViewHeaderFooterView.Style</code> used to set up the view.
///
/// \param title The title string.
///
- (void)setupWithStyle:(enum MSFTableViewHeaderFooterViewStyle)style title:(NSString * _Nonnull)title;
- (void)layoutSubviews;
- (void)prepareForReuse;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)didMoveToWindow;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MSFTableViewHeaderFooterViewAccessoryButtonStyle, "AccessoryButtonStyle", open) {
  MSFTableViewHeaderFooterViewAccessoryButtonStyleRegular = 0,
  MSFTableViewHeaderFooterViewAccessoryButtonStylePrimary = 1,
};

/// Defines the visual style of the view
typedef SWIFT_ENUM_NAMED(NSInteger, MSFTableViewHeaderFooterViewStyle, "Style", open) {
  MSFTableViewHeaderFooterViewStyleHeader = 0,
  MSFTableViewHeaderFooterViewStyleDivider = 1,
  MSFTableViewHeaderFooterViewStyleDividerHighlighted = 2,
  MSFTableViewHeaderFooterViewStyleFooter = 3,
  MSFTableViewHeaderFooterViewStyleHeaderPrimary = 4,
};

@class UITextView;
@class NSURL;

@interface MSFTableViewHeaderFooterView (SWIFT_EXTENSION(FluentUI)) <UITextViewDelegate>
- (BOOL)textView:(UITextView * _Nonnull)textView shouldInteractWithURL:(NSURL * _Nonnull)URL inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL_NAMED("TableViewHeaderFooterViewDelegate")
@protocol MSFTableViewHeaderFooterViewDelegate
@optional
/// Returns: true if the interaction with the header view should be allowed; false if the interaction should not be allowed.
- (BOOL)headerFooterView:(MSFTableViewHeaderFooterView * _Nonnull)headerFooterView shouldInteractWith:(NSURL * _Nonnull)URL in:(NSRange)characterRange interaction:(UITextItemInteraction)interaction SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MSFTextColorStyle, "TextColorStyle", open) {
  MSFTextColorStyleRegular = 0,
  MSFTextColorStyleSecondary = 1,
  MSFTextColorStyleWhite = 2,
  MSFTextColorStylePrimary = 3,
  MSFTextColorStyleError = 4,
  MSFTextColorStyleWarning = 5,
  MSFTextColorStyleDisabled = 6,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MSFTextStyle, "TextStyle", open) {
  MSFTextStyleLargeTitle = 0,
  MSFTextStyleTitle1 = 1,
  MSFTextStyleTitle2 = 2,
  MSFTextStyleHeadline = 3,
  MSFTextStyleBody = 4,
  MSFTextStyleSubhead = 5,
  MSFTextStyleFootnote = 6,
  MSFTextStyleButton1 = 7,
  MSFTextStyleButton2 = 8,
  MSFTextStyleCaption1 = 9,
  MSFTextStyleCaption2 = 10,
};


SWIFT_CLASS_NAMED("TouchForwardingView")
@interface MSFTouchForwardingView : UIView
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



@interface UIColor (SWIFT_EXTENSION(FluentUI))
/// Creates a dynamic color object that returns the appropriate color value based on the current
/// rendering context.
/// The decision order for choosing between the colors is based on the following questions, in order:
/// <ul>
///   <li>
///     Is the current <code>userInterfaceStyle</code> <code>.dark</code> or <code>.light</code>?
///   </li>
///   <li>
///     Is the current <code>userInterfaceLevel</code> <code>.base</code> or <code>.elevated</code>?
///   </li>
///   <li>
///     Is the current <code>accessibilityContrast</code> <code>.normal</code> or <code>.high</code>?
///   </li>
/// </ul>
/// \param light The default color for a light context. Required.
///
/// \param lightHighContrast The override color for a light, high contrast context. Optional.
///
/// \param lightElevated The override color for a light, elevated context. Optional.
///
/// \param lightElevatedHighContrast The override color for a light, elevated, high contrast context. Optional.
///
/// \param dark The override color for a dark context. Optional.
///
/// \param darkHighContrast The override color for a dark, high contrast context. Optional.
///
/// \param darkElevated The override color for a dark, elevated context. Optional.
///
/// \param darkElevatedHighContrast The override color for a dark, elevated, high contrast context. Optional.
///
- (nonnull instancetype)initWithLight:(UIColor * _Nonnull)light lightHighContrast:(UIColor * _Nullable)lightHighContrast lightElevated:(UIColor * _Nullable)lightElevated lightElevatedHighContrast:(UIColor * _Nullable)lightElevatedHighContrast dark:(UIColor * _Nullable)dark darkHighContrast:(UIColor * _Nullable)darkHighContrast darkElevated:(UIColor * _Nullable)darkElevated darkElevatedHighContrast:(UIColor * _Nullable)darkElevatedHighContrast;
/// Creates a UIColor from a <code>ColorValue</code> instance.
/// \param colorValue Color value to use to initialize this color.
///
- (nonnull instancetype)initWithColorValue:(MSFColorValue * _Nonnull)colorValue;
/// Creates a dynamic color object that returns the appropriate color value based on the current
/// rendering context.
/// \param dynamicColor The set of color values that may be applied based on the current context.
///
- (nonnull instancetype)initWithDynamicColor:(MSFDynamicColor * _Nonnull)dynamicColor;
@end


@interface UIFont (SWIFT_EXTENSION(FluentUI))
+ (UIFont * _Nonnull)fluent:(MSFFontInfo * _Nonnull)fontInfo shouldScale:(BOOL)shouldScale SWIFT_WARN_UNUSED_RESULT;
@end





@interface UIView (SWIFT_EXTENSION(FluentUI))
/// The custom <code>FluentTheme</code> to apply to this view.
@property (nonatomic, strong) MSFFluentTheme * _Nonnull fluentTheme;
@end



#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
